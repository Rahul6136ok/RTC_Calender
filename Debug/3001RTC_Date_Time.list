
3001RTC_Date_Time.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034a0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  08003630  08003630  00004630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800378c  0800378c  0000505c  2**0
                  CONTENTS
  4 .ARM          00000008  0800378c  0800378c  0000478c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003794  08003794  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003794  08003794  00004794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003798  08003798  00004798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  0800379c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000505c  2**0
                  CONTENTS
 10 .bss          000001d4  2000005c  2000005c  0000505c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000230  20000230  0000505c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009c27  00000000  00000000  0000508c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000019b9  00000000  00000000  0000ecb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000808  00000000  00000000  00010670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000618  00000000  00000000  00010e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000210df  00000000  00000000  00011490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a6a2  00000000  00000000  0003256f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c8cd4  00000000  00000000  0003cc11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001058e5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000024d4  00000000  00000000  00105928  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000072  00000000  00000000  00107dfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003618 	.word	0x08003618

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08003618 	.word	0x08003618

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler (void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8000574:	f000 fbac 	bl	8000cd0 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 8000578:	f000 fd1c 	bl	8000fb4 <HAL_SYSTICK_IRQHandler>
}
 800057c:	bf00      	nop
 800057e:	bd80      	pop	{r7, pc}

08000580 <EXTI0_IRQHandler>:
{
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
}
*/
void EXTI0_IRQHandler(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000584:	2001      	movs	r0, #1
 8000586:	f000 febf 	bl	8001308 <HAL_GPIO_EXTI_IRQHandler>
}
 800058a:	bf00      	nop
 800058c:	bd80      	pop	{r7, pc}
	...

08000590 <printmsg>:
  * @param  format: Format string as in printf.
  * @param  ...: Additional arguments providing the data to print.
  * @retval None
  */
void printmsg(char *format,...)
{
 8000590:	b40f      	push	{r0, r1, r2, r3}
 8000592:	b580      	push	{r7, lr}
 8000594:	b096      	sub	sp, #88	@ 0x58
 8000596:	af00      	add	r7, sp, #0
  char str[80];

  /*Extract the the argument list using VA apis */
  va_list args;
  va_start(args, format);
 8000598:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800059c:	607b      	str	r3, [r7, #4]
  vsprintf(str, format,args);
 800059e:	f107 0308 	add.w	r3, r7, #8
 80005a2:	687a      	ldr	r2, [r7, #4]
 80005a4:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80005a6:	4618      	mov	r0, r3
 80005a8:	f002 fbac 	bl	8002d04 <vsiprintf>
  HAL_UART_Transmit(&huart2,(uint8_t *)str, strlen(str),HAL_MAX_DELAY);
 80005ac:	f107 0308 	add.w	r3, r7, #8
 80005b0:	4618      	mov	r0, r3
 80005b2:	f7ff fe0d 	bl	80001d0 <strlen>
 80005b6:	4603      	mov	r3, r0
 80005b8:	b29a      	uxth	r2, r3
 80005ba:	f107 0108 	add.w	r1, r7, #8
 80005be:	f04f 33ff 	mov.w	r3, #4294967295
 80005c2:	4805      	ldr	r0, [pc, #20]	@ (80005d8 <printmsg+0x48>)
 80005c4:	f001 ffcc 	bl	8002560 <HAL_UART_Transmit>
  va_end(args);
}
 80005c8:	bf00      	nop
 80005ca:	3758      	adds	r7, #88	@ 0x58
 80005cc:	46bd      	mov	sp, r7
 80005ce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80005d2:	b004      	add	sp, #16
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	20000078 	.word	0x20000078

080005dc <main>:



int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
	HAL_Init();
 80005e2:	f000 fb23 	bl	8000c2c <HAL_Init>
	GPIO_Init();
 80005e6:	f000 f929 	bl	800083c <GPIO_Init>
	SystemClock_Config_HSE(SYS_CLOCK_FREQ_50_MHZ);
 80005ea:	2032      	movs	r0, #50	@ 0x32
 80005ec:	f000 f846 	bl	800067c <SystemClock_Config_HSE>
	UART2_Init();
 80005f0:	f000 f970 	bl	80008d4 <UART2_Init>

	printmsg("This is RTC calendar Test programe \r\n");
 80005f4:	481c      	ldr	r0, [pc, #112]	@ (8000668 <main+0x8c>)
 80005f6:	f7ff ffcb 	bl	8000590 <printmsg>

	RTC_Init();
 80005fa:	f000 f8d3 	bl	80007a4 <RTC_Init>
	RTC_CalendarConfig(); // it does not affect RTC
 80005fe:	f000 f8f7 	bl	80007f0 <RTC_CalendarConfig>



	__HAL_RCC_PWR_CLK_ENABLE();
 8000602:	2300      	movs	r3, #0
 8000604:	607b      	str	r3, [r7, #4]
 8000606:	4b19      	ldr	r3, [pc, #100]	@ (800066c <main+0x90>)
 8000608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800060a:	4a18      	ldr	r2, [pc, #96]	@ (800066c <main+0x90>)
 800060c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000610:	6413      	str	r3, [r2, #64]	@ 0x40
 8000612:	4b16      	ldr	r3, [pc, #88]	@ (800066c <main+0x90>)
 8000614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000616:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800061a:	607b      	str	r3, [r7, #4]
 800061c:	687b      	ldr	r3, [r7, #4]
	HAL_PWR_EnableBkUpAccess();
 800061e:	f000 fe8b 	bl	8001338 <HAL_PWR_EnableBkUpAccess>

	if(__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET)
 8000622:	4b13      	ldr	r3, [pc, #76]	@ (8000670 <main+0x94>)
 8000624:	685b      	ldr	r3, [r3, #4]
 8000626:	f003 0302 	and.w	r3, r3, #2
 800062a:	2b02      	cmp	r3, #2
 800062c:	d111      	bne.n	8000652 <main+0x76>
	{
	    __HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);  // Clear standby flag
 800062e:	4b10      	ldr	r3, [pc, #64]	@ (8000670 <main+0x94>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	4a0f      	ldr	r2, [pc, #60]	@ (8000670 <main+0x94>)
 8000634:	f043 0308 	orr.w	r3, r3, #8
 8000638:	6013      	str	r3, [r2, #0]
	    __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);  // Clear wake-up flag
 800063a:	4b0d      	ldr	r3, [pc, #52]	@ (8000670 <main+0x94>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	4a0c      	ldr	r2, [pc, #48]	@ (8000670 <main+0x94>)
 8000640:	f043 0304 	orr.w	r3, r3, #4
 8000644:	6013      	str	r3, [r2, #0]

	    printmsg("Woke up from STANDBY\r\n");
 8000646:	480b      	ldr	r0, [pc, #44]	@ (8000674 <main+0x98>)
 8000648:	f7ff ffa2 	bl	8000590 <printmsg>

	    HAL_GPIO_EXTI_Callback(GPIO_PIN_0); // Read RTC and display time if needed
 800064c:	2001      	movs	r0, #1
 800064e:	f000 f98f 	bl	8000970 <HAL_GPIO_EXTI_Callback>
	}

	// Enable the wakeup pin
	HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 8000652:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8000656:	f000 fe83 	bl	8001360 <HAL_PWR_EnableWakeUpPin>

	printmsg("Went to STANDBY mode\r\n");
 800065a:	4807      	ldr	r0, [pc, #28]	@ (8000678 <main+0x9c>)
 800065c:	f7ff ff98 	bl	8000590 <printmsg>

	// Enter standby mode
	HAL_PWR_EnterSTANDBYMode();
 8000660:	f000 fe90 	bl	8001384 <HAL_PWR_EnterSTANDBYMode>

	  while(1);
 8000664:	bf00      	nop
 8000666:	e7fd      	b.n	8000664 <main+0x88>
 8000668:	08003630 	.word	0x08003630
 800066c:	40023800 	.word	0x40023800
 8000670:	40007000 	.word	0x40007000
 8000674:	08003658 	.word	0x08003658
 8000678:	08003670 	.word	0x08003670

0800067c <SystemClock_Config_HSE>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config_HSE(uint8_t clock_freq)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b096      	sub	sp, #88	@ 0x58
 8000680:	af00      	add	r7, sp, #0
 8000682:	4603      	mov	r3, r0
 8000684:	71fb      	strb	r3, [r7, #7]
  RCC_OscInitTypeDef Osc_Init;
  RCC_ClkInitTypeDef Clock_Init;
    uint8_t flash_latency=0;
 8000686:	2300      	movs	r3, #0
 8000688:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

  Osc_Init.OscillatorType = RCC_OSCILLATORTYPE_HSE ;
 800068c:	2301      	movs	r3, #1
 800068e:	623b      	str	r3, [r7, #32]
  Osc_Init.HSEState = RCC_HSE_ON;
 8000690:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000694:	627b      	str	r3, [r7, #36]	@ 0x24
  Osc_Init.PLL.PLLState = RCC_PLL_ON;
 8000696:	2302      	movs	r3, #2
 8000698:	63bb      	str	r3, [r7, #56]	@ 0x38
  Osc_Init.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800069a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800069e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  switch(clock_freq) {
 80006a0:	79fb      	ldrb	r3, [r7, #7]
 80006a2:	2b78      	cmp	r3, #120	@ 0x78
 80006a4:	d034      	beq.n	8000710 <SystemClock_Config_HSE+0x94>
 80006a6:	2b78      	cmp	r3, #120	@ 0x78
 80006a8:	dc76      	bgt.n	8000798 <SystemClock_Config_HSE+0x11c>
 80006aa:	2b32      	cmp	r3, #50	@ 0x32
 80006ac:	d002      	beq.n	80006b4 <SystemClock_Config_HSE+0x38>
 80006ae:	2b54      	cmp	r3, #84	@ 0x54
 80006b0:	d017      	beq.n	80006e2 <SystemClock_Config_HSE+0x66>
    Clock_Init.APB2CLKDivider = RCC_HCLK_DIV2;
    flash_latency = 3;
    break;

  default:
    return ;
 80006b2:	e071      	b.n	8000798 <SystemClock_Config_HSE+0x11c>
    Osc_Init.PLL.PLLM = 4;
 80006b4:	2304      	movs	r3, #4
 80006b6:	643b      	str	r3, [r7, #64]	@ 0x40
    Osc_Init.PLL.PLLN = 50;
 80006b8:	2332      	movs	r3, #50	@ 0x32
 80006ba:	647b      	str	r3, [r7, #68]	@ 0x44
    Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 80006bc:	2302      	movs	r3, #2
 80006be:	64bb      	str	r3, [r7, #72]	@ 0x48
    Osc_Init.PLL.PLLQ = 2;
 80006c0:	2302      	movs	r3, #2
 80006c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK  | RCC_CLOCKTYPE_SYSCLK |
 80006c4:	230f      	movs	r3, #15
 80006c6:	60fb      	str	r3, [r7, #12]
    Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c8:	2302      	movs	r3, #2
 80006ca:	613b      	str	r3, [r7, #16]
    Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006cc:	2300      	movs	r3, #0
 80006ce:	617b      	str	r3, [r7, #20]
    Clock_Init.APB1CLKDivider = RCC_HCLK_DIV2;
 80006d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006d4:	61bb      	str	r3, [r7, #24]
    Clock_Init.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d6:	2300      	movs	r3, #0
 80006d8:	61fb      	str	r3, [r7, #28]
    flash_latency = 1;
 80006da:	2301      	movs	r3, #1
 80006dc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    break;
 80006e0:	e02e      	b.n	8000740 <SystemClock_Config_HSE+0xc4>
    Osc_Init.PLL.PLLM = 4;
 80006e2:	2304      	movs	r3, #4
 80006e4:	643b      	str	r3, [r7, #64]	@ 0x40
    Osc_Init.PLL.PLLN = 84;
 80006e6:	2354      	movs	r3, #84	@ 0x54
 80006e8:	647b      	str	r3, [r7, #68]	@ 0x44
    Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 80006ea:	2302      	movs	r3, #2
 80006ec:	64bb      	str	r3, [r7, #72]	@ 0x48
    Osc_Init.PLL.PLLQ = 2;
 80006ee:	2302      	movs	r3, #2
 80006f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
    Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK  | RCC_CLOCKTYPE_SYSCLK |
 80006f2:	230f      	movs	r3, #15
 80006f4:	60fb      	str	r3, [r7, #12]
    Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f6:	2302      	movs	r3, #2
 80006f8:	613b      	str	r3, [r7, #16]
    Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006fa:	2300      	movs	r3, #0
 80006fc:	617b      	str	r3, [r7, #20]
    Clock_Init.APB1CLKDivider = RCC_HCLK_DIV2;
 80006fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000702:	61bb      	str	r3, [r7, #24]
    Clock_Init.APB2CLKDivider = RCC_HCLK_DIV1;
 8000704:	2300      	movs	r3, #0
 8000706:	61fb      	str	r3, [r7, #28]
    flash_latency = 2;
 8000708:	2302      	movs	r3, #2
 800070a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    break;
 800070e:	e017      	b.n	8000740 <SystemClock_Config_HSE+0xc4>
    Osc_Init.PLL.PLLM = 4;
 8000710:	2304      	movs	r3, #4
 8000712:	643b      	str	r3, [r7, #64]	@ 0x40
    Osc_Init.PLL.PLLN = 120;
 8000714:	2378      	movs	r3, #120	@ 0x78
 8000716:	647b      	str	r3, [r7, #68]	@ 0x44
    Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 8000718:	2302      	movs	r3, #2
 800071a:	64bb      	str	r3, [r7, #72]	@ 0x48
    Osc_Init.PLL.PLLQ = 2;
 800071c:	2302      	movs	r3, #2
 800071e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK  | RCC_CLOCKTYPE_SYSCLK |
 8000720:	230f      	movs	r3, #15
 8000722:	60fb      	str	r3, [r7, #12]
    Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000724:	2302      	movs	r3, #2
 8000726:	613b      	str	r3, [r7, #16]
    Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000728:	2300      	movs	r3, #0
 800072a:	617b      	str	r3, [r7, #20]
    Clock_Init.APB1CLKDivider = RCC_HCLK_DIV4;
 800072c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000730:	61bb      	str	r3, [r7, #24]
    Clock_Init.APB2CLKDivider = RCC_HCLK_DIV2;
 8000732:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000736:	61fb      	str	r3, [r7, #28]
    flash_latency = 3;
 8000738:	2303      	movs	r3, #3
 800073a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    break;
 800073e:	bf00      	nop
  }

  if (HAL_RCC_OscConfig(&Osc_Init) != HAL_OK)
 8000740:	f107 0320 	add.w	r3, r7, #32
 8000744:	4618      	mov	r0, r3
 8000746:	f000 fe35 	bl	80013b4 <HAL_RCC_OscConfig>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <SystemClock_Config_HSE+0xd8>
  {
    Error_handler();
 8000750:	f000 f94a 	bl	80009e8 <Error_handler>
  }

  if (HAL_RCC_ClockConfig(&Clock_Init, flash_latency) != HAL_OK)
 8000754:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8000758:	f107 030c 	add.w	r3, r7, #12
 800075c:	4611      	mov	r1, r2
 800075e:	4618      	mov	r0, r3
 8000760:	f001 f8a0 	bl	80018a4 <HAL_RCC_ClockConfig>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <SystemClock_Config_HSE+0xf2>
  {
    Error_handler();
 800076a:	f000 f93d 	bl	80009e8 <Error_handler>
  }

  /*Configure the systick timer interrupt frequency (for every 1 ms) */
  uint32_t hclk_freq = HAL_RCC_GetHCLKFreq();
 800076e:	f001 fa85 	bl	8001c7c <HAL_RCC_GetHCLKFreq>
 8000772:	6538      	str	r0, [r7, #80]	@ 0x50
  HAL_SYSTICK_Config(hclk_freq/1000);
 8000774:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000776:	4a0a      	ldr	r2, [pc, #40]	@ (80007a0 <SystemClock_Config_HSE+0x124>)
 8000778:	fba2 2303 	umull	r2, r3, r2, r3
 800077c:	099b      	lsrs	r3, r3, #6
 800077e:	4618      	mov	r0, r3
 8000780:	f000 fbef 	bl	8000f62 <HAL_SYSTICK_Config>

  /**Configure the Systick
  */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000784:	2004      	movs	r0, #4
 8000786:	f000 fbf9 	bl	8000f7c <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800078a:	2200      	movs	r2, #0
 800078c:	2100      	movs	r1, #0
 800078e:	f04f 30ff 	mov.w	r0, #4294967295
 8000792:	f000 fbbc 	bl	8000f0e <HAL_NVIC_SetPriority>
 8000796:	e000      	b.n	800079a <SystemClock_Config_HSE+0x11e>
    return ;
 8000798:	bf00      	nop
}
 800079a:	3758      	adds	r7, #88	@ 0x58
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	10624dd3 	.word	0x10624dd3

080007a4 <RTC_Init>:
  * @param None
  * @retval None
  */

void RTC_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0


	hrtc.Instance =RTC;
 80007a8:	4b0f      	ldr	r3, [pc, #60]	@ (80007e8 <RTC_Init+0x44>)
 80007aa:	4a10      	ldr	r2, [pc, #64]	@ (80007ec <RTC_Init+0x48>)
 80007ac:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80007ae:	4b0e      	ldr	r3, [pc, #56]	@ (80007e8 <RTC_Init+0x44>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 0x7F;
 80007b4:	4b0c      	ldr	r3, [pc, #48]	@ (80007e8 <RTC_Init+0x44>)
 80007b6:	227f      	movs	r2, #127	@ 0x7f
 80007b8:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 0xF9;
 80007ba:	4b0b      	ldr	r3, [pc, #44]	@ (80007e8 <RTC_Init+0x44>)
 80007bc:	22f9      	movs	r2, #249	@ 0xf9
 80007be:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80007c0:	4b09      	ldr	r3, [pc, #36]	@ (80007e8 <RTC_Init+0x44>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_LOW;
 80007c6:	4b08      	ldr	r3, [pc, #32]	@ (80007e8 <RTC_Init+0x44>)
 80007c8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80007cc:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80007ce:	4b06      	ldr	r3, [pc, #24]	@ (80007e8 <RTC_Init+0x44>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	619a      	str	r2, [r3, #24]

	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80007d4:	4804      	ldr	r0, [pc, #16]	@ (80007e8 <RTC_Init+0x44>)
 80007d6:	f001 fb67 	bl	8001ea8 <HAL_RTC_Init>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <RTC_Init+0x40>
	{
		Error_handler();
 80007e0:	f000 f902 	bl	80009e8 <Error_handler>
	}

}
 80007e4:	bf00      	nop
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	200000c0 	.word	0x200000c0
 80007ec:	40002800 	.word	0x40002800

080007f0 <RTC_CalendarConfig>:



void RTC_CalendarConfig(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b086      	sub	sp, #24
 80007f4:	af00      	add	r7, sp, #0

	//this function does RTC Calender Config
	//Lets configure the calender for time
	//: 05:24:45 PM : 20 oct 2024 TUESDAY

	RTC_TimeInit.Hours = 5;
 80007f6:	2305      	movs	r3, #5
 80007f8:	713b      	strb	r3, [r7, #4]
	RTC_TimeInit.Minutes = 25;
 80007fa:	2319      	movs	r3, #25
 80007fc:	717b      	strb	r3, [r7, #5]
	RTC_TimeInit.Seconds = 45;
 80007fe:	232d      	movs	r3, #45	@ 0x2d
 8000800:	71bb      	strb	r3, [r7, #6]
	RTC_TimeInit.TimeFormat = RTC_HOURFORMAT12_AM;
 8000802:	2300      	movs	r3, #0
 8000804:	71fb      	strb	r3, [r7, #7]

	HAL_RTC_SetTime(&hrtc, &RTC_TimeInit, RTC_FORMAT_BIN);
 8000806:	1d3b      	adds	r3, r7, #4
 8000808:	2200      	movs	r2, #0
 800080a:	4619      	mov	r1, r3
 800080c:	480a      	ldr	r0, [pc, #40]	@ (8000838 <RTC_CalendarConfig+0x48>)
 800080e:	f001 fbce 	bl	8001fae <HAL_RTC_SetTime>


	RTC_DateInit.Date = 20;
 8000812:	2314      	movs	r3, #20
 8000814:	70bb      	strb	r3, [r7, #2]
	RTC_DateInit.Month = RTC_MONTH_OCTOBER;
 8000816:	2310      	movs	r3, #16
 8000818:	707b      	strb	r3, [r7, #1]
	RTC_DateInit.Year = 24;
 800081a:	2318      	movs	r3, #24
 800081c:	70fb      	strb	r3, [r7, #3]
	RTC_DateInit.WeekDay = RTC_WEEKDAY_SUNDAY;
 800081e:	2307      	movs	r3, #7
 8000820:	703b      	strb	r3, [r7, #0]

	HAL_RTC_SetDate(&hrtc, &RTC_DateInit, RTC_FORMAT_BIN);
 8000822:	463b      	mov	r3, r7
 8000824:	2200      	movs	r2, #0
 8000826:	4619      	mov	r1, r3
 8000828:	4803      	ldr	r0, [pc, #12]	@ (8000838 <RTC_CalendarConfig+0x48>)
 800082a:	f001 fcb8 	bl	800219e <HAL_RTC_SetDate>

}
 800082e:	bf00      	nop
 8000830:	3718      	adds	r7, #24
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	200000c0 	.word	0x200000c0

0800083c <GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void GPIO_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b08c      	sub	sp, #48	@ 0x30
 8000840:	af00      	add	r7, sp, #0
  // Enable clocks for GPIOD (LEDs) and GPIOA (Button)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	607b      	str	r3, [r7, #4]
 8000846:	4b20      	ldr	r3, [pc, #128]	@ (80008c8 <GPIO_Init+0x8c>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084a:	4a1f      	ldr	r2, [pc, #124]	@ (80008c8 <GPIO_Init+0x8c>)
 800084c:	f043 0308 	orr.w	r3, r3, #8
 8000850:	6313      	str	r3, [r2, #48]	@ 0x30
 8000852:	4b1d      	ldr	r3, [pc, #116]	@ (80008c8 <GPIO_Init+0x8c>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000856:	f003 0308 	and.w	r3, r3, #8
 800085a:	607b      	str	r3, [r7, #4]
 800085c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	603b      	str	r3, [r7, #0]
 8000862:	4b19      	ldr	r3, [pc, #100]	@ (80008c8 <GPIO_Init+0x8c>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000866:	4a18      	ldr	r2, [pc, #96]	@ (80008c8 <GPIO_Init+0x8c>)
 8000868:	f043 0301 	orr.w	r3, r3, #1
 800086c:	6313      	str	r3, [r2, #48]	@ 0x30
 800086e:	4b16      	ldr	r3, [pc, #88]	@ (80008c8 <GPIO_Init+0x8c>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000872:	f003 0301 	and.w	r3, r3, #1
 8000876:	603b      	str	r3, [r7, #0]
 8000878:	683b      	ldr	r3, [r7, #0]

  GPIO_InitTypeDef ledgpio, buttongpio;

  // Initialize PD12 for onboard LED (Green LED)
  ledgpio.Pin = GPIO_PIN_12;
 800087a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800087e:	61fb      	str	r3, [r7, #28]
  ledgpio.Mode = GPIO_MODE_OUTPUT_PP;
 8000880:	2301      	movs	r3, #1
 8000882:	623b      	str	r3, [r7, #32]
  ledgpio.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &ledgpio);
 8000888:	f107 031c 	add.w	r3, r7, #28
 800088c:	4619      	mov	r1, r3
 800088e:	480f      	ldr	r0, [pc, #60]	@ (80008cc <GPIO_Init+0x90>)
 8000890:	f000 fb9e 	bl	8000fd0 <HAL_GPIO_Init>

  // Initialize PA0 for onboard user button (User Button)
  buttongpio.Pin = GPIO_PIN_0;
 8000894:	2301      	movs	r3, #1
 8000896:	60bb      	str	r3, [r7, #8]
  buttongpio.Mode = GPIO_MODE_IT_FALLING;  // Trigger interrupt on button press (falling edge)
 8000898:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800089c:	60fb      	str	r3, [r7, #12]
  buttongpio.Pull = GPIO_NOPULL;
 800089e:	2300      	movs	r3, #0
 80008a0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &buttongpio);
 80008a2:	f107 0308 	add.w	r3, r7, #8
 80008a6:	4619      	mov	r1, r3
 80008a8:	4809      	ldr	r0, [pc, #36]	@ (80008d0 <GPIO_Init+0x94>)
 80008aa:	f000 fb91 	bl	8000fd0 <HAL_GPIO_Init>

  // Configure and enable external interrupt for PA0 (EXTI0_IRQn)
  HAL_NVIC_SetPriority(EXTI0_IRQn, 15, 0);
 80008ae:	2200      	movs	r2, #0
 80008b0:	210f      	movs	r1, #15
 80008b2:	2006      	movs	r0, #6
 80008b4:	f000 fb2b 	bl	8000f0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80008b8:	2006      	movs	r0, #6
 80008ba:	f000 fb44 	bl	8000f46 <HAL_NVIC_EnableIRQ>
}
 80008be:	bf00      	nop
 80008c0:	3730      	adds	r7, #48	@ 0x30
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	40023800 	.word	0x40023800
 80008cc:	40020c00 	.word	0x40020c00
 80008d0:	40020000 	.word	0x40020000

080008d4 <UART2_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
void UART2_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 80008d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000918 <UART2_Init+0x44>)
 80008da:	4a10      	ldr	r2, [pc, #64]	@ (800091c <UART2_Init+0x48>)
 80008dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate =115200;
 80008de:	4b0e      	ldr	r3, [pc, #56]	@ (8000918 <UART2_Init+0x44>)
 80008e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008e6:	4b0c      	ldr	r3, [pc, #48]	@ (8000918 <UART2_Init+0x44>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008ec:	4b0a      	ldr	r3, [pc, #40]	@ (8000918 <UART2_Init+0x44>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008f2:	4b09      	ldr	r3, [pc, #36]	@ (8000918 <UART2_Init+0x44>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	611a      	str	r2, [r3, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008f8:	4b07      	ldr	r3, [pc, #28]	@ (8000918 <UART2_Init+0x44>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	619a      	str	r2, [r3, #24]
  huart2.Init.Mode = UART_MODE_TX;
 80008fe:	4b06      	ldr	r3, [pc, #24]	@ (8000918 <UART2_Init+0x44>)
 8000900:	2208      	movs	r2, #8
 8000902:	615a      	str	r2, [r3, #20]

  if ( HAL_UART_Init(&huart2) != HAL_OK )
 8000904:	4804      	ldr	r0, [pc, #16]	@ (8000918 <UART2_Init+0x44>)
 8000906:	f001 fddb 	bl	80024c0 <HAL_UART_Init>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <UART2_Init+0x40>
  {
    //There is a problem
    Error_handler();
 8000910:	f000 f86a 	bl	80009e8 <Error_handler>
  }
}
 8000914:	bf00      	nop
 8000916:	bd80      	pop	{r7, pc}
 8000918:	20000078 	.word	0x20000078
 800091c:	40004400 	.word	0x40004400

08000920 <getDayofweek>:
  * @param  number: The day of the week as a number (1 for Monday, 2 for Tuesday, etc.).
  * @retval char*: The name of the corresponding day of the week.
  */

char* getDayofweek(uint8_t number)
{
 8000920:	b4b0      	push	{r4, r5, r7}
 8000922:	b08b      	sub	sp, #44	@ 0x2c
 8000924:	af00      	add	r7, sp, #0
 8000926:	4603      	mov	r3, r0
 8000928:	71fb      	strb	r3, [r7, #7]

	// Ensure the day number is valid (between 1 and 7)
	   if (number < 1 || number > 7)
 800092a:	79fb      	ldrb	r3, [r7, #7]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d002      	beq.n	8000936 <getDayofweek+0x16>
 8000930:	79fb      	ldrb	r3, [r7, #7]
 8000932:	2b07      	cmp	r3, #7
 8000934:	d901      	bls.n	800093a <getDayofweek+0x1a>
	    {
	      return "Invalid Day"; // Handle invalid input
 8000936:	4b0c      	ldr	r3, [pc, #48]	@ (8000968 <getDayofweek+0x48>)
 8000938:	e010      	b.n	800095c <getDayofweek+0x3c>
	    }
	char *weekday[] = { "Monday", "TuesDay", "Wednesday","Thursday","Friday","Saturday","Sunday"};
 800093a:	4b0c      	ldr	r3, [pc, #48]	@ (800096c <getDayofweek+0x4c>)
 800093c:	f107 040c 	add.w	r4, r7, #12
 8000940:	461d      	mov	r5, r3
 8000942:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000944:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000946:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800094a:	e884 0007 	stmia.w	r4, {r0, r1, r2}

    return weekday[number-1];
 800094e:	79fb      	ldrb	r3, [r7, #7]
 8000950:	3b01      	subs	r3, #1
 8000952:	009b      	lsls	r3, r3, #2
 8000954:	3328      	adds	r3, #40	@ 0x28
 8000956:	443b      	add	r3, r7
 8000958:	f853 3c1c 	ldr.w	r3, [r3, #-28]
}
 800095c:	4618      	mov	r0, r3
 800095e:	372c      	adds	r7, #44	@ 0x2c
 8000960:	46bd      	mov	sp, r7
 8000962:	bcb0      	pop	{r4, r5, r7}
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	08003688 	.word	0x08003688
 800096c:	080036d8 	.word	0x080036d8

08000970 <HAL_GPIO_EXTI_Callback>:
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000970:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000972:	b08b      	sub	sp, #44	@ 0x2c
 8000974:	af02      	add	r7, sp, #8
 8000976:	4603      	mov	r3, r0
 8000978:	80fb      	strh	r3, [r7, #6]
	RTC_TimeTypeDef RTC_TimeRead;
	RTC_DateTypeDef RTC_DateRead;

	HAL_RTC_GetTime(&hrtc, &RTC_TimeRead, RTC_FORMAT_BIN);
 800097a:	f107 030c 	add.w	r3, r7, #12
 800097e:	2200      	movs	r2, #0
 8000980:	4619      	mov	r1, r3
 8000982:	4816      	ldr	r0, [pc, #88]	@ (80009dc <HAL_GPIO_EXTI_Callback+0x6c>)
 8000984:	f001 fbad 	bl	80020e2 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &RTC_DateRead, RTC_FORMAT_BIN);
 8000988:	f107 0308 	add.w	r3, r7, #8
 800098c:	2200      	movs	r2, #0
 800098e:	4619      	mov	r1, r3
 8000990:	4812      	ldr	r0, [pc, #72]	@ (80009dc <HAL_GPIO_EXTI_Callback+0x6c>)
 8000992:	f001 fc88 	bl	80022a6 <HAL_RTC_GetDate>

	//printmsg("Current time is : %02d:%02d:%2d\r\n",RTC_TimeRead.Hours,\RTC_TimeRead.Minutes,RTC_TimeRead.Seconds);

	//printmsg("Current Date is : %02d-%2d-%2d <%s> \r\n",RTC_DateRead.Month,RTC_DateRead.Date,\RTC_DateRead.Year,getDayofweek(RTC_DateRead));

	printmsg("Current Time is : %02d:%02d:%02d\r\n",RTC_TimeRead.Hours,\
 8000996:	7b3b      	ldrb	r3, [r7, #12]
 8000998:	4619      	mov	r1, r3
	     RTC_TimeRead.Minutes,RTC_TimeRead.Seconds);
 800099a:	7b7b      	ldrb	r3, [r7, #13]
	printmsg("Current Time is : %02d:%02d:%02d\r\n",RTC_TimeRead.Hours,\
 800099c:	461a      	mov	r2, r3
	     RTC_TimeRead.Minutes,RTC_TimeRead.Seconds);
 800099e:	7bbb      	ldrb	r3, [r7, #14]
	printmsg("Current Time is : %02d:%02d:%02d\r\n",RTC_TimeRead.Hours,\
 80009a0:	480f      	ldr	r0, [pc, #60]	@ (80009e0 <HAL_GPIO_EXTI_Callback+0x70>)
 80009a2:	f7ff fdf5 	bl	8000590 <printmsg>
	HAL_Delay(1000);
 80009a6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80009aa:	f000 f9b1 	bl	8000d10 <HAL_Delay>
	printmsg("Current Date is : %02d-%2d-%2d  <%s> \r\n",RTC_DateRead.Date,RTC_DateRead.Month,\
 80009ae:	7abb      	ldrb	r3, [r7, #10]
 80009b0:	461c      	mov	r4, r3
 80009b2:	7a7b      	ldrb	r3, [r7, #9]
 80009b4:	461d      	mov	r5, r3
	     RTC_DateRead.Year,getDayofweek(RTC_DateRead.WeekDay));
 80009b6:	7afb      	ldrb	r3, [r7, #11]
	printmsg("Current Date is : %02d-%2d-%2d  <%s> \r\n",RTC_DateRead.Date,RTC_DateRead.Month,\
 80009b8:	461e      	mov	r6, r3
 80009ba:	7a3b      	ldrb	r3, [r7, #8]
 80009bc:	4618      	mov	r0, r3
 80009be:	f7ff ffaf 	bl	8000920 <getDayofweek>
 80009c2:	4603      	mov	r3, r0
 80009c4:	9300      	str	r3, [sp, #0]
 80009c6:	4633      	mov	r3, r6
 80009c8:	462a      	mov	r2, r5
 80009ca:	4621      	mov	r1, r4
 80009cc:	4805      	ldr	r0, [pc, #20]	@ (80009e4 <HAL_GPIO_EXTI_Callback+0x74>)
 80009ce:	f7ff fddf 	bl	8000590 <printmsg>

}
 80009d2:	bf00      	nop
 80009d4:	3724      	adds	r7, #36	@ 0x24
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009da:	bf00      	nop
 80009dc:	200000c0 	.word	0x200000c0
 80009e0:	080036f4 	.word	0x080036f4
 80009e4:	08003718 	.word	0x08003718

080009e8 <Error_handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  while(1);
 80009ec:	bf00      	nop
 80009ee:	e7fd      	b.n	80009ec <Error_handler+0x4>

080009f0 <HAL_MspInit>:
/*
 * @breif Initialize the msp
 * @retval None
 */
void HAL_MspInit(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
	//Here will do low level processor specific inits.
	  //1. Set up the priority grouping of the arm cortex mx processor
	  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009f4:	2003      	movs	r0, #3
 80009f6:	f000 fa7f 	bl	8000ef8 <HAL_NVIC_SetPriorityGrouping>

	  //2. Enable the required system exceptions of the arm cortex mx processor
	  SCB->SHCSR |= 0x7 << 16; //usage fault, memory fault and bus fault system exceptions
 80009fa:	4b0d      	ldr	r3, [pc, #52]	@ (8000a30 <HAL_MspInit+0x40>)
 80009fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009fe:	4a0c      	ldr	r2, [pc, #48]	@ (8000a30 <HAL_MspInit+0x40>)
 8000a00:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 8000a04:	6253      	str	r3, [r2, #36]	@ 0x24

	  //3. configure the priority for the system exceptions
	  HAL_NVIC_SetPriority(MemoryManagement_IRQn,0,0);
 8000a06:	2200      	movs	r2, #0
 8000a08:	2100      	movs	r1, #0
 8000a0a:	f06f 000b 	mvn.w	r0, #11
 8000a0e:	f000 fa7e 	bl	8000f0e <HAL_NVIC_SetPriority>
	  HAL_NVIC_SetPriority(BusFault_IRQn,0,0);
 8000a12:	2200      	movs	r2, #0
 8000a14:	2100      	movs	r1, #0
 8000a16:	f06f 000a 	mvn.w	r0, #10
 8000a1a:	f000 fa78 	bl	8000f0e <HAL_NVIC_SetPriority>
	  HAL_NVIC_SetPriority(UsageFault_IRQn,0,0);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	2100      	movs	r1, #0
 8000a22:	f06f 0009 	mvn.w	r0, #9
 8000a26:	f000 fa72 	bl	8000f0e <HAL_NVIC_SetPriority>
}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	e000ed00 	.word	0xe000ed00

08000a34 <HAL_UART_MspInit>:
  *   //here we are going to do the low level inits. of the USART2 peripheral
  *
  * @retval None
 */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b08a      	sub	sp, #40	@ 0x28
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef gpio_uart;

    // Enable the clock for USART2 and GPIOA peripherals
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	613b      	str	r3, [r7, #16]
 8000a40:	4b22      	ldr	r3, [pc, #136]	@ (8000acc <HAL_UART_MspInit+0x98>)
 8000a42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a44:	4a21      	ldr	r2, [pc, #132]	@ (8000acc <HAL_UART_MspInit+0x98>)
 8000a46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a4a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a4c:	4b1f      	ldr	r3, [pc, #124]	@ (8000acc <HAL_UART_MspInit+0x98>)
 8000a4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a54:	613b      	str	r3, [r7, #16]
 8000a56:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a58:	2300      	movs	r3, #0
 8000a5a:	60fb      	str	r3, [r7, #12]
 8000a5c:	4b1b      	ldr	r3, [pc, #108]	@ (8000acc <HAL_UART_MspInit+0x98>)
 8000a5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a60:	4a1a      	ldr	r2, [pc, #104]	@ (8000acc <HAL_UART_MspInit+0x98>)
 8000a62:	f043 0301 	orr.w	r3, r3, #1
 8000a66:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a68:	4b18      	ldr	r3, [pc, #96]	@ (8000acc <HAL_UART_MspInit+0x98>)
 8000a6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6c:	f003 0301 	and.w	r3, r3, #1
 8000a70:	60fb      	str	r3, [r7, #12]
 8000a72:	68fb      	ldr	r3, [r7, #12]

    // Configure PA2 (TX)
    gpio_uart.Pin = GPIO_PIN_2; // UART2_TX
 8000a74:	2304      	movs	r3, #4
 8000a76:	617b      	str	r3, [r7, #20]
    gpio_uart.Mode = GPIO_MODE_AF_PP; // Alternate function push-pull
 8000a78:	2302      	movs	r3, #2
 8000a7a:	61bb      	str	r3, [r7, #24]
    gpio_uart.Pull = GPIO_PULLUP; // Pull-up resistor
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	61fb      	str	r3, [r7, #28]
    gpio_uart.Speed = GPIO_SPEED_FREQ_LOW; // Speed setting
 8000a80:	2300      	movs	r3, #0
 8000a82:	623b      	str	r3, [r7, #32]
    gpio_uart.Alternate = GPIO_AF7_USART2; // Alternate function for USART2_TX
 8000a84:	2307      	movs	r3, #7
 8000a86:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &gpio_uart);
 8000a88:	f107 0314 	add.w	r3, r7, #20
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	4810      	ldr	r0, [pc, #64]	@ (8000ad0 <HAL_UART_MspInit+0x9c>)
 8000a90:	f000 fa9e 	bl	8000fd0 <HAL_GPIO_Init>

    // Configure PA3 (RX)
    gpio_uart.Pin = GPIO_PIN_3; // UART2_RX
 8000a94:	2308      	movs	r3, #8
 8000a96:	617b      	str	r3, [r7, #20]
    gpio_uart.Mode = GPIO_MODE_AF_OD; // Alternate function open-drain
 8000a98:	2312      	movs	r3, #18
 8000a9a:	61bb      	str	r3, [r7, #24]
    gpio_uart.Pull = GPIO_PULLUP; // Pull-up resistor
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	61fb      	str	r3, [r7, #28]
    gpio_uart.Speed = GPIO_SPEED_FREQ_LOW; // Speed setting
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	623b      	str	r3, [r7, #32]
    gpio_uart.Alternate = GPIO_AF7_USART2; // Alternate function for USART2_RX
 8000aa4:	2307      	movs	r3, #7
 8000aa6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &gpio_uart);
 8000aa8:	f107 0314 	add.w	r3, r7, #20
 8000aac:	4619      	mov	r1, r3
 8000aae:	4808      	ldr	r0, [pc, #32]	@ (8000ad0 <HAL_UART_MspInit+0x9c>)
 8000ab0:	f000 fa8e 	bl	8000fd0 <HAL_GPIO_Init>

    // Enable the USART2 interrupt and set the priority
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	2026      	movs	r0, #38	@ 0x26
 8000aba:	f000 fa28 	bl	8000f0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000abe:	2026      	movs	r0, #38	@ 0x26
 8000ac0:	f000 fa41 	bl	8000f46 <HAL_NVIC_EnableIRQ>
}
 8000ac4:	bf00      	nop
 8000ac6:	3728      	adds	r7, #40	@ 0x28
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	40023800 	.word	0x40023800
 8000ad0:	40020000 	.word	0x40020000

08000ad4 <HAL_RTC_MspInit>:
    __HAL_RCC_RTC_ENABLE();
}

*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b092      	sub	sp, #72	@ 0x48
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000adc:	f107 0318 	add.w	r3, r7, #24
 8000ae0:	2230      	movs	r2, #48	@ 0x30
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f002 f917 	bl	8002d18 <memset>
    RCC_PeriphCLKInitTypeDef RCC_RTCPeriClkInit = {0};
 8000aea:	f107 0308 	add.w	r3, r7, #8
 8000aee:	2200      	movs	r2, #0
 8000af0:	601a      	str	r2, [r3, #0]
 8000af2:	605a      	str	r2, [r3, #4]
 8000af4:	609a      	str	r2, [r3, #8]
 8000af6:	60da      	str	r2, [r3, #12]

    // 1. Turn on the LSI oscillator
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI; // Set the oscillator type
 8000af8:	2308      	movs	r3, #8
 8000afa:	61bb      	str	r3, [r7, #24]
    RCC_OscInitStruct.LSIState = RCC_LSI_ON;                   // Enable the LSI
 8000afc:	2301      	movs	r3, #1
 8000afe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;             // No PLL for RTC
 8000b00:	2300      	movs	r3, #0
 8000b02:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b04:	f107 0318 	add.w	r3, r7, #24
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f000 fc53 	bl	80013b4 <HAL_RCC_OscConfig>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <HAL_RTC_MspInit+0x44>
    {
        // Handle oscillator config error
        Error_handler();
 8000b14:	f7ff ff68 	bl	80009e8 <Error_handler>
    }

    // 2. Select LSI as RTC clock source
    RCC_RTCPeriClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;    // Select RTC peripheral
 8000b18:	2302      	movs	r3, #2
 8000b1a:	60bb      	str	r3, [r7, #8]
    RCC_RTCPeriClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;    // Choose LSI as the clock source
 8000b1c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b20:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&RCC_RTCPeriClkInit) != HAL_OK)
 8000b22:	f107 0308 	add.w	r3, r7, #8
 8000b26:	4618      	mov	r0, r3
 8000b28:	f001 f8dc 	bl	8001ce4 <HAL_RCCEx_PeriphCLKConfig>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <HAL_RTC_MspInit+0x62>
    {
        // Handle peripheral clock config error
        Error_handler();
 8000b32:	f7ff ff59 	bl	80009e8 <Error_handler>
    }

    // 3. Enable the RTC Clock
    __HAL_RCC_RTC_ENABLE();
 8000b36:	4b03      	ldr	r3, [pc, #12]	@ (8000b44 <HAL_RTC_MspInit+0x70>)
 8000b38:	2201      	movs	r2, #1
 8000b3a:	601a      	str	r2, [r3, #0]
}
 8000b3c:	bf00      	nop
 8000b3e:	3748      	adds	r7, #72	@ 0x48
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	42470e3c 	.word	0x42470e3c

08000b48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b086      	sub	sp, #24
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b50:	4a14      	ldr	r2, [pc, #80]	@ (8000ba4 <_sbrk+0x5c>)
 8000b52:	4b15      	ldr	r3, [pc, #84]	@ (8000ba8 <_sbrk+0x60>)
 8000b54:	1ad3      	subs	r3, r2, r3
 8000b56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b5c:	4b13      	ldr	r3, [pc, #76]	@ (8000bac <_sbrk+0x64>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d102      	bne.n	8000b6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b64:	4b11      	ldr	r3, [pc, #68]	@ (8000bac <_sbrk+0x64>)
 8000b66:	4a12      	ldr	r2, [pc, #72]	@ (8000bb0 <_sbrk+0x68>)
 8000b68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b6a:	4b10      	ldr	r3, [pc, #64]	@ (8000bac <_sbrk+0x64>)
 8000b6c:	681a      	ldr	r2, [r3, #0]
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	4413      	add	r3, r2
 8000b72:	693a      	ldr	r2, [r7, #16]
 8000b74:	429a      	cmp	r2, r3
 8000b76:	d207      	bcs.n	8000b88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b78:	f002 f8d6 	bl	8002d28 <__errno>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	220c      	movs	r2, #12
 8000b80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b82:	f04f 33ff 	mov.w	r3, #4294967295
 8000b86:	e009      	b.n	8000b9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b88:	4b08      	ldr	r3, [pc, #32]	@ (8000bac <_sbrk+0x64>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b8e:	4b07      	ldr	r3, [pc, #28]	@ (8000bac <_sbrk+0x64>)
 8000b90:	681a      	ldr	r2, [r3, #0]
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	4413      	add	r3, r2
 8000b96:	4a05      	ldr	r2, [pc, #20]	@ (8000bac <_sbrk+0x64>)
 8000b98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b9a:	68fb      	ldr	r3, [r7, #12]
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	3718      	adds	r7, #24
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	20020000 	.word	0x20020000
 8000ba8:	00000400 	.word	0x00000400
 8000bac:	200000e0 	.word	0x200000e0
 8000bb0:	20000230 	.word	0x20000230

08000bb4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bb8:	4b06      	ldr	r3, [pc, #24]	@ (8000bd4 <SystemInit+0x20>)
 8000bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bbe:	4a05      	ldr	r2, [pc, #20]	@ (8000bd4 <SystemInit+0x20>)
 8000bc0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bc4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bc8:	bf00      	nop
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	e000ed00 	.word	0xe000ed00

08000bd8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000bd8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c10 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000bdc:	f7ff ffea 	bl	8000bb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000be0:	480c      	ldr	r0, [pc, #48]	@ (8000c14 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000be2:	490d      	ldr	r1, [pc, #52]	@ (8000c18 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000be4:	4a0d      	ldr	r2, [pc, #52]	@ (8000c1c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000be6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000be8:	e002      	b.n	8000bf0 <LoopCopyDataInit>

08000bea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bee:	3304      	adds	r3, #4

08000bf0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bf0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bf2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bf4:	d3f9      	bcc.n	8000bea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bf6:	4a0a      	ldr	r2, [pc, #40]	@ (8000c20 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bf8:	4c0a      	ldr	r4, [pc, #40]	@ (8000c24 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bfc:	e001      	b.n	8000c02 <LoopFillZerobss>

08000bfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c00:	3204      	adds	r2, #4

08000c02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c04:	d3fb      	bcc.n	8000bfe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c06:	f002 f895 	bl	8002d34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c0a:	f7ff fce7 	bl	80005dc <main>
  bx  lr    
 8000c0e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c10:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c18:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000c1c:	0800379c 	.word	0x0800379c
  ldr r2, =_sbss
 8000c20:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000c24:	20000230 	.word	0x20000230

08000c28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c28:	e7fe      	b.n	8000c28 <ADC_IRQHandler>
	...

08000c2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c30:	4b0e      	ldr	r3, [pc, #56]	@ (8000c6c <HAL_Init+0x40>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a0d      	ldr	r2, [pc, #52]	@ (8000c6c <HAL_Init+0x40>)
 8000c36:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c3c:	4b0b      	ldr	r3, [pc, #44]	@ (8000c6c <HAL_Init+0x40>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a0a      	ldr	r2, [pc, #40]	@ (8000c6c <HAL_Init+0x40>)
 8000c42:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c48:	4b08      	ldr	r3, [pc, #32]	@ (8000c6c <HAL_Init+0x40>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a07      	ldr	r2, [pc, #28]	@ (8000c6c <HAL_Init+0x40>)
 8000c4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c54:	2003      	movs	r0, #3
 8000c56:	f000 f94f 	bl	8000ef8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c5a:	2000      	movs	r0, #0
 8000c5c:	f000 f808 	bl	8000c70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c60:	f7ff fec6 	bl	80009f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c64:	2300      	movs	r3, #0
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	40023c00 	.word	0x40023c00

08000c70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c78:	4b12      	ldr	r3, [pc, #72]	@ (8000cc4 <HAL_InitTick+0x54>)
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	4b12      	ldr	r3, [pc, #72]	@ (8000cc8 <HAL_InitTick+0x58>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	4619      	mov	r1, r3
 8000c82:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f000 f967 	bl	8000f62 <HAL_SYSTICK_Config>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	e00e      	b.n	8000cbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	2b0f      	cmp	r3, #15
 8000ca2:	d80a      	bhi.n	8000cba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	6879      	ldr	r1, [r7, #4]
 8000ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cac:	f000 f92f 	bl	8000f0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cb0:	4a06      	ldr	r2, [pc, #24]	@ (8000ccc <HAL_InitTick+0x5c>)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e000      	b.n	8000cbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cba:	2301      	movs	r3, #1
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	3708      	adds	r7, #8
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	20000000 	.word	0x20000000
 8000cc8:	20000008 	.word	0x20000008
 8000ccc:	20000004 	.word	0x20000004

08000cd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cd4:	4b06      	ldr	r3, [pc, #24]	@ (8000cf0 <HAL_IncTick+0x20>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	461a      	mov	r2, r3
 8000cda:	4b06      	ldr	r3, [pc, #24]	@ (8000cf4 <HAL_IncTick+0x24>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4413      	add	r3, r2
 8000ce0:	4a04      	ldr	r2, [pc, #16]	@ (8000cf4 <HAL_IncTick+0x24>)
 8000ce2:	6013      	str	r3, [r2, #0]
}
 8000ce4:	bf00      	nop
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	20000008 	.word	0x20000008
 8000cf4:	200000e4 	.word	0x200000e4

08000cf8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  return uwTick;
 8000cfc:	4b03      	ldr	r3, [pc, #12]	@ (8000d0c <HAL_GetTick+0x14>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	200000e4 	.word	0x200000e4

08000d10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d18:	f7ff ffee 	bl	8000cf8 <HAL_GetTick>
 8000d1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d28:	d005      	beq.n	8000d36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d2a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d54 <HAL_Delay+0x44>)
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	461a      	mov	r2, r3
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	4413      	add	r3, r2
 8000d34:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d36:	bf00      	nop
 8000d38:	f7ff ffde 	bl	8000cf8 <HAL_GetTick>
 8000d3c:	4602      	mov	r2, r0
 8000d3e:	68bb      	ldr	r3, [r7, #8]
 8000d40:	1ad3      	subs	r3, r2, r3
 8000d42:	68fa      	ldr	r2, [r7, #12]
 8000d44:	429a      	cmp	r2, r3
 8000d46:	d8f7      	bhi.n	8000d38 <HAL_Delay+0x28>
  {
  }
}
 8000d48:	bf00      	nop
 8000d4a:	bf00      	nop
 8000d4c:	3710      	adds	r7, #16
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	20000008 	.word	0x20000008

08000d58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b085      	sub	sp, #20
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	f003 0307 	and.w	r3, r3, #7
 8000d66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d68:	4b0c      	ldr	r3, [pc, #48]	@ (8000d9c <__NVIC_SetPriorityGrouping+0x44>)
 8000d6a:	68db      	ldr	r3, [r3, #12]
 8000d6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d6e:	68ba      	ldr	r2, [r7, #8]
 8000d70:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d74:	4013      	ands	r3, r2
 8000d76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d80:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d8a:	4a04      	ldr	r2, [pc, #16]	@ (8000d9c <__NVIC_SetPriorityGrouping+0x44>)
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	60d3      	str	r3, [r2, #12]
}
 8000d90:	bf00      	nop
 8000d92:	3714      	adds	r7, #20
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr
 8000d9c:	e000ed00 	.word	0xe000ed00

08000da0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000da4:	4b04      	ldr	r3, [pc, #16]	@ (8000db8 <__NVIC_GetPriorityGrouping+0x18>)
 8000da6:	68db      	ldr	r3, [r3, #12]
 8000da8:	0a1b      	lsrs	r3, r3, #8
 8000daa:	f003 0307 	and.w	r3, r3, #7
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	e000ed00 	.word	0xe000ed00

08000dbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	db0b      	blt.n	8000de6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dce:	79fb      	ldrb	r3, [r7, #7]
 8000dd0:	f003 021f 	and.w	r2, r3, #31
 8000dd4:	4907      	ldr	r1, [pc, #28]	@ (8000df4 <__NVIC_EnableIRQ+0x38>)
 8000dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dda:	095b      	lsrs	r3, r3, #5
 8000ddc:	2001      	movs	r0, #1
 8000dde:	fa00 f202 	lsl.w	r2, r0, r2
 8000de2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000de6:	bf00      	nop
 8000de8:	370c      	adds	r7, #12
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	e000e100 	.word	0xe000e100

08000df8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	4603      	mov	r3, r0
 8000e00:	6039      	str	r1, [r7, #0]
 8000e02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	db0a      	blt.n	8000e22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	b2da      	uxtb	r2, r3
 8000e10:	490c      	ldr	r1, [pc, #48]	@ (8000e44 <__NVIC_SetPriority+0x4c>)
 8000e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e16:	0112      	lsls	r2, r2, #4
 8000e18:	b2d2      	uxtb	r2, r2
 8000e1a:	440b      	add	r3, r1
 8000e1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e20:	e00a      	b.n	8000e38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	b2da      	uxtb	r2, r3
 8000e26:	4908      	ldr	r1, [pc, #32]	@ (8000e48 <__NVIC_SetPriority+0x50>)
 8000e28:	79fb      	ldrb	r3, [r7, #7]
 8000e2a:	f003 030f 	and.w	r3, r3, #15
 8000e2e:	3b04      	subs	r3, #4
 8000e30:	0112      	lsls	r2, r2, #4
 8000e32:	b2d2      	uxtb	r2, r2
 8000e34:	440b      	add	r3, r1
 8000e36:	761a      	strb	r2, [r3, #24]
}
 8000e38:	bf00      	nop
 8000e3a:	370c      	adds	r7, #12
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr
 8000e44:	e000e100 	.word	0xe000e100
 8000e48:	e000ed00 	.word	0xe000ed00

08000e4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b089      	sub	sp, #36	@ 0x24
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	60f8      	str	r0, [r7, #12]
 8000e54:	60b9      	str	r1, [r7, #8]
 8000e56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	f003 0307 	and.w	r3, r3, #7
 8000e5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e60:	69fb      	ldr	r3, [r7, #28]
 8000e62:	f1c3 0307 	rsb	r3, r3, #7
 8000e66:	2b04      	cmp	r3, #4
 8000e68:	bf28      	it	cs
 8000e6a:	2304      	movcs	r3, #4
 8000e6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	3304      	adds	r3, #4
 8000e72:	2b06      	cmp	r3, #6
 8000e74:	d902      	bls.n	8000e7c <NVIC_EncodePriority+0x30>
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	3b03      	subs	r3, #3
 8000e7a:	e000      	b.n	8000e7e <NVIC_EncodePriority+0x32>
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e80:	f04f 32ff 	mov.w	r2, #4294967295
 8000e84:	69bb      	ldr	r3, [r7, #24]
 8000e86:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8a:	43da      	mvns	r2, r3
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	401a      	ands	r2, r3
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e94:	f04f 31ff 	mov.w	r1, #4294967295
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e9e:	43d9      	mvns	r1, r3
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea4:	4313      	orrs	r3, r2
         );
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3724      	adds	r7, #36	@ 0x24
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
	...

08000eb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	3b01      	subs	r3, #1
 8000ec0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ec4:	d301      	bcc.n	8000eca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	e00f      	b.n	8000eea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eca:	4a0a      	ldr	r2, [pc, #40]	@ (8000ef4 <SysTick_Config+0x40>)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	3b01      	subs	r3, #1
 8000ed0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ed2:	210f      	movs	r1, #15
 8000ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ed8:	f7ff ff8e 	bl	8000df8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000edc:	4b05      	ldr	r3, [pc, #20]	@ (8000ef4 <SysTick_Config+0x40>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ee2:	4b04      	ldr	r3, [pc, #16]	@ (8000ef4 <SysTick_Config+0x40>)
 8000ee4:	2207      	movs	r2, #7
 8000ee6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ee8:	2300      	movs	r3, #0
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	e000e010 	.word	0xe000e010

08000ef8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f00:	6878      	ldr	r0, [r7, #4]
 8000f02:	f7ff ff29 	bl	8000d58 <__NVIC_SetPriorityGrouping>
}
 8000f06:	bf00      	nop
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}

08000f0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	b086      	sub	sp, #24
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	4603      	mov	r3, r0
 8000f16:	60b9      	str	r1, [r7, #8]
 8000f18:	607a      	str	r2, [r7, #4]
 8000f1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f20:	f7ff ff3e 	bl	8000da0 <__NVIC_GetPriorityGrouping>
 8000f24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f26:	687a      	ldr	r2, [r7, #4]
 8000f28:	68b9      	ldr	r1, [r7, #8]
 8000f2a:	6978      	ldr	r0, [r7, #20]
 8000f2c:	f7ff ff8e 	bl	8000e4c <NVIC_EncodePriority>
 8000f30:	4602      	mov	r2, r0
 8000f32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f36:	4611      	mov	r1, r2
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f7ff ff5d 	bl	8000df8 <__NVIC_SetPriority>
}
 8000f3e:	bf00      	nop
 8000f40:	3718      	adds	r7, #24
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}

08000f46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f46:	b580      	push	{r7, lr}
 8000f48:	b082      	sub	sp, #8
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f54:	4618      	mov	r0, r3
 8000f56:	f7ff ff31 	bl	8000dbc <__NVIC_EnableIRQ>
}
 8000f5a:	bf00      	nop
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b082      	sub	sp, #8
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	f7ff ffa2 	bl	8000eb4 <SysTick_Config>
 8000f70:	4603      	mov	r3, r0
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
	...

08000f7c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2b04      	cmp	r3, #4
 8000f88:	d106      	bne.n	8000f98 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000f8a:	4b09      	ldr	r3, [pc, #36]	@ (8000fb0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4a08      	ldr	r2, [pc, #32]	@ (8000fb0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000f90:	f043 0304 	orr.w	r3, r3, #4
 8000f94:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000f96:	e005      	b.n	8000fa4 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000f98:	4b05      	ldr	r3, [pc, #20]	@ (8000fb0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a04      	ldr	r2, [pc, #16]	@ (8000fb0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000f9e:	f023 0304 	bic.w	r3, r3, #4
 8000fa2:	6013      	str	r3, [r2, #0]
}
 8000fa4:	bf00      	nop
 8000fa6:	370c      	adds	r7, #12
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr
 8000fb0:	e000e010 	.word	0xe000e010

08000fb4 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000fb8:	f000 f802 	bl	8000fc0 <HAL_SYSTICK_Callback>
}
 8000fbc:	bf00      	nop
 8000fbe:	bd80      	pop	{r7, pc}

08000fc0 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000fc4:	bf00      	nop
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
	...

08000fd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b089      	sub	sp, #36	@ 0x24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	61fb      	str	r3, [r7, #28]
 8000fea:	e16b      	b.n	80012c4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fec:	2201      	movs	r2, #1
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	697a      	ldr	r2, [r7, #20]
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001000:	693a      	ldr	r2, [r7, #16]
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	429a      	cmp	r2, r3
 8001006:	f040 815a 	bne.w	80012be <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	f003 0303 	and.w	r3, r3, #3
 8001012:	2b01      	cmp	r3, #1
 8001014:	d005      	beq.n	8001022 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800101e:	2b02      	cmp	r3, #2
 8001020:	d130      	bne.n	8001084 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	689b      	ldr	r3, [r3, #8]
 8001026:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	005b      	lsls	r3, r3, #1
 800102c:	2203      	movs	r2, #3
 800102e:	fa02 f303 	lsl.w	r3, r2, r3
 8001032:	43db      	mvns	r3, r3
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	4013      	ands	r3, r2
 8001038:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	68da      	ldr	r2, [r3, #12]
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	fa02 f303 	lsl.w	r3, r2, r3
 8001046:	69ba      	ldr	r2, [r7, #24]
 8001048:	4313      	orrs	r3, r2
 800104a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	69ba      	ldr	r2, [r7, #24]
 8001050:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001058:	2201      	movs	r2, #1
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	43db      	mvns	r3, r3
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	4013      	ands	r3, r2
 8001066:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	091b      	lsrs	r3, r3, #4
 800106e:	f003 0201 	and.w	r2, r3, #1
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	4313      	orrs	r3, r2
 800107c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f003 0303 	and.w	r3, r3, #3
 800108c:	2b03      	cmp	r3, #3
 800108e:	d017      	beq.n	80010c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	2203      	movs	r2, #3
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	43db      	mvns	r3, r3
 80010a2:	69ba      	ldr	r2, [r7, #24]
 80010a4:	4013      	ands	r3, r2
 80010a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	689a      	ldr	r2, [r3, #8]
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	005b      	lsls	r3, r3, #1
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	4313      	orrs	r3, r2
 80010b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f003 0303 	and.w	r3, r3, #3
 80010c8:	2b02      	cmp	r3, #2
 80010ca:	d123      	bne.n	8001114 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	08da      	lsrs	r2, r3, #3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	3208      	adds	r2, #8
 80010d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	f003 0307 	and.w	r3, r3, #7
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	220f      	movs	r2, #15
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	43db      	mvns	r3, r3
 80010ea:	69ba      	ldr	r2, [r7, #24]
 80010ec:	4013      	ands	r3, r2
 80010ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	691a      	ldr	r2, [r3, #16]
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	f003 0307 	and.w	r3, r3, #7
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	4313      	orrs	r3, r2
 8001104:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	08da      	lsrs	r2, r3, #3
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	3208      	adds	r2, #8
 800110e:	69b9      	ldr	r1, [r7, #24]
 8001110:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	2203      	movs	r2, #3
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	43db      	mvns	r3, r3
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	4013      	ands	r3, r2
 800112a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f003 0203 	and.w	r2, r3, #3
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	005b      	lsls	r3, r3, #1
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	4313      	orrs	r3, r2
 8001140:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001150:	2b00      	cmp	r3, #0
 8001152:	f000 80b4 	beq.w	80012be <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	60fb      	str	r3, [r7, #12]
 800115a:	4b60      	ldr	r3, [pc, #384]	@ (80012dc <HAL_GPIO_Init+0x30c>)
 800115c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800115e:	4a5f      	ldr	r2, [pc, #380]	@ (80012dc <HAL_GPIO_Init+0x30c>)
 8001160:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001164:	6453      	str	r3, [r2, #68]	@ 0x44
 8001166:	4b5d      	ldr	r3, [pc, #372]	@ (80012dc <HAL_GPIO_Init+0x30c>)
 8001168:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800116a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001172:	4a5b      	ldr	r2, [pc, #364]	@ (80012e0 <HAL_GPIO_Init+0x310>)
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	089b      	lsrs	r3, r3, #2
 8001178:	3302      	adds	r3, #2
 800117a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800117e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	f003 0303 	and.w	r3, r3, #3
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	220f      	movs	r2, #15
 800118a:	fa02 f303 	lsl.w	r3, r2, r3
 800118e:	43db      	mvns	r3, r3
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	4013      	ands	r3, r2
 8001194:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4a52      	ldr	r2, [pc, #328]	@ (80012e4 <HAL_GPIO_Init+0x314>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d02b      	beq.n	80011f6 <HAL_GPIO_Init+0x226>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4a51      	ldr	r2, [pc, #324]	@ (80012e8 <HAL_GPIO_Init+0x318>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d025      	beq.n	80011f2 <HAL_GPIO_Init+0x222>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4a50      	ldr	r2, [pc, #320]	@ (80012ec <HAL_GPIO_Init+0x31c>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d01f      	beq.n	80011ee <HAL_GPIO_Init+0x21e>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4a4f      	ldr	r2, [pc, #316]	@ (80012f0 <HAL_GPIO_Init+0x320>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d019      	beq.n	80011ea <HAL_GPIO_Init+0x21a>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4a4e      	ldr	r2, [pc, #312]	@ (80012f4 <HAL_GPIO_Init+0x324>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d013      	beq.n	80011e6 <HAL_GPIO_Init+0x216>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4a4d      	ldr	r2, [pc, #308]	@ (80012f8 <HAL_GPIO_Init+0x328>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d00d      	beq.n	80011e2 <HAL_GPIO_Init+0x212>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4a4c      	ldr	r2, [pc, #304]	@ (80012fc <HAL_GPIO_Init+0x32c>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d007      	beq.n	80011de <HAL_GPIO_Init+0x20e>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4a4b      	ldr	r2, [pc, #300]	@ (8001300 <HAL_GPIO_Init+0x330>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d101      	bne.n	80011da <HAL_GPIO_Init+0x20a>
 80011d6:	2307      	movs	r3, #7
 80011d8:	e00e      	b.n	80011f8 <HAL_GPIO_Init+0x228>
 80011da:	2308      	movs	r3, #8
 80011dc:	e00c      	b.n	80011f8 <HAL_GPIO_Init+0x228>
 80011de:	2306      	movs	r3, #6
 80011e0:	e00a      	b.n	80011f8 <HAL_GPIO_Init+0x228>
 80011e2:	2305      	movs	r3, #5
 80011e4:	e008      	b.n	80011f8 <HAL_GPIO_Init+0x228>
 80011e6:	2304      	movs	r3, #4
 80011e8:	e006      	b.n	80011f8 <HAL_GPIO_Init+0x228>
 80011ea:	2303      	movs	r3, #3
 80011ec:	e004      	b.n	80011f8 <HAL_GPIO_Init+0x228>
 80011ee:	2302      	movs	r3, #2
 80011f0:	e002      	b.n	80011f8 <HAL_GPIO_Init+0x228>
 80011f2:	2301      	movs	r3, #1
 80011f4:	e000      	b.n	80011f8 <HAL_GPIO_Init+0x228>
 80011f6:	2300      	movs	r3, #0
 80011f8:	69fa      	ldr	r2, [r7, #28]
 80011fa:	f002 0203 	and.w	r2, r2, #3
 80011fe:	0092      	lsls	r2, r2, #2
 8001200:	4093      	lsls	r3, r2
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	4313      	orrs	r3, r2
 8001206:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001208:	4935      	ldr	r1, [pc, #212]	@ (80012e0 <HAL_GPIO_Init+0x310>)
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	089b      	lsrs	r3, r3, #2
 800120e:	3302      	adds	r3, #2
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001216:	4b3b      	ldr	r3, [pc, #236]	@ (8001304 <HAL_GPIO_Init+0x334>)
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	43db      	mvns	r3, r3
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	4013      	ands	r3, r2
 8001224:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800122e:	2b00      	cmp	r3, #0
 8001230:	d003      	beq.n	800123a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	4313      	orrs	r3, r2
 8001238:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800123a:	4a32      	ldr	r2, [pc, #200]	@ (8001304 <HAL_GPIO_Init+0x334>)
 800123c:	69bb      	ldr	r3, [r7, #24]
 800123e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001240:	4b30      	ldr	r3, [pc, #192]	@ (8001304 <HAL_GPIO_Init+0x334>)
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	43db      	mvns	r3, r3
 800124a:	69ba      	ldr	r2, [r7, #24]
 800124c:	4013      	ands	r3, r2
 800124e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001258:	2b00      	cmp	r3, #0
 800125a:	d003      	beq.n	8001264 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	4313      	orrs	r3, r2
 8001262:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001264:	4a27      	ldr	r2, [pc, #156]	@ (8001304 <HAL_GPIO_Init+0x334>)
 8001266:	69bb      	ldr	r3, [r7, #24]
 8001268:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800126a:	4b26      	ldr	r3, [pc, #152]	@ (8001304 <HAL_GPIO_Init+0x334>)
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	43db      	mvns	r3, r3
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	4013      	ands	r3, r2
 8001278:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001282:	2b00      	cmp	r3, #0
 8001284:	d003      	beq.n	800128e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	4313      	orrs	r3, r2
 800128c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800128e:	4a1d      	ldr	r2, [pc, #116]	@ (8001304 <HAL_GPIO_Init+0x334>)
 8001290:	69bb      	ldr	r3, [r7, #24]
 8001292:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001294:	4b1b      	ldr	r3, [pc, #108]	@ (8001304 <HAL_GPIO_Init+0x334>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	43db      	mvns	r3, r3
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	4013      	ands	r3, r2
 80012a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d003      	beq.n	80012b8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012b8:	4a12      	ldr	r2, [pc, #72]	@ (8001304 <HAL_GPIO_Init+0x334>)
 80012ba:	69bb      	ldr	r3, [r7, #24]
 80012bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	3301      	adds	r3, #1
 80012c2:	61fb      	str	r3, [r7, #28]
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	2b0f      	cmp	r3, #15
 80012c8:	f67f ae90 	bls.w	8000fec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012cc:	bf00      	nop
 80012ce:	bf00      	nop
 80012d0:	3724      	adds	r7, #36	@ 0x24
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	40023800 	.word	0x40023800
 80012e0:	40013800 	.word	0x40013800
 80012e4:	40020000 	.word	0x40020000
 80012e8:	40020400 	.word	0x40020400
 80012ec:	40020800 	.word	0x40020800
 80012f0:	40020c00 	.word	0x40020c00
 80012f4:	40021000 	.word	0x40021000
 80012f8:	40021400 	.word	0x40021400
 80012fc:	40021800 	.word	0x40021800
 8001300:	40021c00 	.word	0x40021c00
 8001304:	40013c00 	.word	0x40013c00

08001308 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001312:	4b08      	ldr	r3, [pc, #32]	@ (8001334 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001314:	695a      	ldr	r2, [r3, #20]
 8001316:	88fb      	ldrh	r3, [r7, #6]
 8001318:	4013      	ands	r3, r2
 800131a:	2b00      	cmp	r3, #0
 800131c:	d006      	beq.n	800132c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800131e:	4a05      	ldr	r2, [pc, #20]	@ (8001334 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001320:	88fb      	ldrh	r3, [r7, #6]
 8001322:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001324:	88fb      	ldrh	r3, [r7, #6]
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff fb22 	bl	8000970 <HAL_GPIO_EXTI_Callback>
  }
}
 800132c:	bf00      	nop
 800132e:	3708      	adds	r7, #8
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	40013c00 	.word	0x40013c00

08001338 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 800133e:	4b06      	ldr	r3, [pc, #24]	@ (8001358 <HAL_PWR_EnableBkUpAccess+0x20>)
 8001340:	2201      	movs	r2, #1
 8001342:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8001344:	4b05      	ldr	r3, [pc, #20]	@ (800135c <HAL_PWR_EnableBkUpAccess+0x24>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 800134a:	687b      	ldr	r3, [r7, #4]
}
 800134c:	bf00      	nop
 800134e:	370c      	adds	r7, #12
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr
 8001358:	420e0020 	.word	0x420e0020
 800135c:	40007000 	.word	0x40007000

08001360 <HAL_PWR_EnableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  /* Enable the wake up pin */
  SET_BIT(PWR->CSR, WakeUpPinx);
 8001368:	4b05      	ldr	r3, [pc, #20]	@ (8001380 <HAL_PWR_EnableWakeUpPin+0x20>)
 800136a:	685a      	ldr	r2, [r3, #4]
 800136c:	4904      	ldr	r1, [pc, #16]	@ (8001380 <HAL_PWR_EnableWakeUpPin+0x20>)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4313      	orrs	r3, r2
 8001372:	604b      	str	r3, [r1, #4]
}
 8001374:	bf00      	nop
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr
 8001380:	40007000 	.word	0x40007000

08001384 <HAL_PWR_EnterSTANDBYMode>:
  *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
  *          - WKUP pin 1 (PA0) if enabled.       
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 8001388:	4b08      	ldr	r3, [pc, #32]	@ (80013ac <HAL_PWR_EnterSTANDBYMode+0x28>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a07      	ldr	r2, [pc, #28]	@ (80013ac <HAL_PWR_EnterSTANDBYMode+0x28>)
 800138e:	f043 0302 	orr.w	r3, r3, #2
 8001392:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001394:	4b06      	ldr	r3, [pc, #24]	@ (80013b0 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8001396:	691b      	ldr	r3, [r3, #16]
 8001398:	4a05      	ldr	r2, [pc, #20]	@ (80013b0 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 800139a:	f043 0304 	orr.w	r3, r3, #4
 800139e:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 80013a0:	bf30      	wfi
}
 80013a2:	bf00      	nop
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr
 80013ac:	40007000 	.word	0x40007000
 80013b0:	e000ed00 	.word	0xe000ed00

080013b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b086      	sub	sp, #24
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d101      	bne.n	80013c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e267      	b.n	8001896 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f003 0301 	and.w	r3, r3, #1
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d075      	beq.n	80014be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80013d2:	4b88      	ldr	r3, [pc, #544]	@ (80015f4 <HAL_RCC_OscConfig+0x240>)
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	f003 030c 	and.w	r3, r3, #12
 80013da:	2b04      	cmp	r3, #4
 80013dc:	d00c      	beq.n	80013f8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013de:	4b85      	ldr	r3, [pc, #532]	@ (80015f4 <HAL_RCC_OscConfig+0x240>)
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80013e6:	2b08      	cmp	r3, #8
 80013e8:	d112      	bne.n	8001410 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013ea:	4b82      	ldr	r3, [pc, #520]	@ (80015f4 <HAL_RCC_OscConfig+0x240>)
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80013f6:	d10b      	bne.n	8001410 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013f8:	4b7e      	ldr	r3, [pc, #504]	@ (80015f4 <HAL_RCC_OscConfig+0x240>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001400:	2b00      	cmp	r3, #0
 8001402:	d05b      	beq.n	80014bc <HAL_RCC_OscConfig+0x108>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d157      	bne.n	80014bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800140c:	2301      	movs	r3, #1
 800140e:	e242      	b.n	8001896 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001418:	d106      	bne.n	8001428 <HAL_RCC_OscConfig+0x74>
 800141a:	4b76      	ldr	r3, [pc, #472]	@ (80015f4 <HAL_RCC_OscConfig+0x240>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a75      	ldr	r2, [pc, #468]	@ (80015f4 <HAL_RCC_OscConfig+0x240>)
 8001420:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001424:	6013      	str	r3, [r2, #0]
 8001426:	e01d      	b.n	8001464 <HAL_RCC_OscConfig+0xb0>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001430:	d10c      	bne.n	800144c <HAL_RCC_OscConfig+0x98>
 8001432:	4b70      	ldr	r3, [pc, #448]	@ (80015f4 <HAL_RCC_OscConfig+0x240>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a6f      	ldr	r2, [pc, #444]	@ (80015f4 <HAL_RCC_OscConfig+0x240>)
 8001438:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800143c:	6013      	str	r3, [r2, #0]
 800143e:	4b6d      	ldr	r3, [pc, #436]	@ (80015f4 <HAL_RCC_OscConfig+0x240>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a6c      	ldr	r2, [pc, #432]	@ (80015f4 <HAL_RCC_OscConfig+0x240>)
 8001444:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001448:	6013      	str	r3, [r2, #0]
 800144a:	e00b      	b.n	8001464 <HAL_RCC_OscConfig+0xb0>
 800144c:	4b69      	ldr	r3, [pc, #420]	@ (80015f4 <HAL_RCC_OscConfig+0x240>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a68      	ldr	r2, [pc, #416]	@ (80015f4 <HAL_RCC_OscConfig+0x240>)
 8001452:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001456:	6013      	str	r3, [r2, #0]
 8001458:	4b66      	ldr	r3, [pc, #408]	@ (80015f4 <HAL_RCC_OscConfig+0x240>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a65      	ldr	r2, [pc, #404]	@ (80015f4 <HAL_RCC_OscConfig+0x240>)
 800145e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001462:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d013      	beq.n	8001494 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800146c:	f7ff fc44 	bl	8000cf8 <HAL_GetTick>
 8001470:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001472:	e008      	b.n	8001486 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001474:	f7ff fc40 	bl	8000cf8 <HAL_GetTick>
 8001478:	4602      	mov	r2, r0
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	2b64      	cmp	r3, #100	@ 0x64
 8001480:	d901      	bls.n	8001486 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001482:	2303      	movs	r3, #3
 8001484:	e207      	b.n	8001896 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001486:	4b5b      	ldr	r3, [pc, #364]	@ (80015f4 <HAL_RCC_OscConfig+0x240>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d0f0      	beq.n	8001474 <HAL_RCC_OscConfig+0xc0>
 8001492:	e014      	b.n	80014be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001494:	f7ff fc30 	bl	8000cf8 <HAL_GetTick>
 8001498:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800149a:	e008      	b.n	80014ae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800149c:	f7ff fc2c 	bl	8000cf8 <HAL_GetTick>
 80014a0:	4602      	mov	r2, r0
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	2b64      	cmp	r3, #100	@ 0x64
 80014a8:	d901      	bls.n	80014ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014aa:	2303      	movs	r3, #3
 80014ac:	e1f3      	b.n	8001896 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014ae:	4b51      	ldr	r3, [pc, #324]	@ (80015f4 <HAL_RCC_OscConfig+0x240>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d1f0      	bne.n	800149c <HAL_RCC_OscConfig+0xe8>
 80014ba:	e000      	b.n	80014be <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 0302 	and.w	r3, r3, #2
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d063      	beq.n	8001592 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80014ca:	4b4a      	ldr	r3, [pc, #296]	@ (80015f4 <HAL_RCC_OscConfig+0x240>)
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	f003 030c 	and.w	r3, r3, #12
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d00b      	beq.n	80014ee <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014d6:	4b47      	ldr	r3, [pc, #284]	@ (80015f4 <HAL_RCC_OscConfig+0x240>)
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80014de:	2b08      	cmp	r3, #8
 80014e0:	d11c      	bne.n	800151c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014e2:	4b44      	ldr	r3, [pc, #272]	@ (80015f4 <HAL_RCC_OscConfig+0x240>)
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d116      	bne.n	800151c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014ee:	4b41      	ldr	r3, [pc, #260]	@ (80015f4 <HAL_RCC_OscConfig+0x240>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 0302 	and.w	r3, r3, #2
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d005      	beq.n	8001506 <HAL_RCC_OscConfig+0x152>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	68db      	ldr	r3, [r3, #12]
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d001      	beq.n	8001506 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e1c7      	b.n	8001896 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001506:	4b3b      	ldr	r3, [pc, #236]	@ (80015f4 <HAL_RCC_OscConfig+0x240>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	691b      	ldr	r3, [r3, #16]
 8001512:	00db      	lsls	r3, r3, #3
 8001514:	4937      	ldr	r1, [pc, #220]	@ (80015f4 <HAL_RCC_OscConfig+0x240>)
 8001516:	4313      	orrs	r3, r2
 8001518:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800151a:	e03a      	b.n	8001592 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d020      	beq.n	8001566 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001524:	4b34      	ldr	r3, [pc, #208]	@ (80015f8 <HAL_RCC_OscConfig+0x244>)
 8001526:	2201      	movs	r2, #1
 8001528:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800152a:	f7ff fbe5 	bl	8000cf8 <HAL_GetTick>
 800152e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001530:	e008      	b.n	8001544 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001532:	f7ff fbe1 	bl	8000cf8 <HAL_GetTick>
 8001536:	4602      	mov	r2, r0
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	1ad3      	subs	r3, r2, r3
 800153c:	2b02      	cmp	r3, #2
 800153e:	d901      	bls.n	8001544 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001540:	2303      	movs	r3, #3
 8001542:	e1a8      	b.n	8001896 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001544:	4b2b      	ldr	r3, [pc, #172]	@ (80015f4 <HAL_RCC_OscConfig+0x240>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f003 0302 	and.w	r3, r3, #2
 800154c:	2b00      	cmp	r3, #0
 800154e:	d0f0      	beq.n	8001532 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001550:	4b28      	ldr	r3, [pc, #160]	@ (80015f4 <HAL_RCC_OscConfig+0x240>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	691b      	ldr	r3, [r3, #16]
 800155c:	00db      	lsls	r3, r3, #3
 800155e:	4925      	ldr	r1, [pc, #148]	@ (80015f4 <HAL_RCC_OscConfig+0x240>)
 8001560:	4313      	orrs	r3, r2
 8001562:	600b      	str	r3, [r1, #0]
 8001564:	e015      	b.n	8001592 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001566:	4b24      	ldr	r3, [pc, #144]	@ (80015f8 <HAL_RCC_OscConfig+0x244>)
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800156c:	f7ff fbc4 	bl	8000cf8 <HAL_GetTick>
 8001570:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001572:	e008      	b.n	8001586 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001574:	f7ff fbc0 	bl	8000cf8 <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	2b02      	cmp	r3, #2
 8001580:	d901      	bls.n	8001586 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	e187      	b.n	8001896 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001586:	4b1b      	ldr	r3, [pc, #108]	@ (80015f4 <HAL_RCC_OscConfig+0x240>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 0302 	and.w	r3, r3, #2
 800158e:	2b00      	cmp	r3, #0
 8001590:	d1f0      	bne.n	8001574 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 0308 	and.w	r3, r3, #8
 800159a:	2b00      	cmp	r3, #0
 800159c:	d036      	beq.n	800160c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	695b      	ldr	r3, [r3, #20]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d016      	beq.n	80015d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015a6:	4b15      	ldr	r3, [pc, #84]	@ (80015fc <HAL_RCC_OscConfig+0x248>)
 80015a8:	2201      	movs	r2, #1
 80015aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015ac:	f7ff fba4 	bl	8000cf8 <HAL_GetTick>
 80015b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015b2:	e008      	b.n	80015c6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015b4:	f7ff fba0 	bl	8000cf8 <HAL_GetTick>
 80015b8:	4602      	mov	r2, r0
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d901      	bls.n	80015c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80015c2:	2303      	movs	r3, #3
 80015c4:	e167      	b.n	8001896 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015c6:	4b0b      	ldr	r3, [pc, #44]	@ (80015f4 <HAL_RCC_OscConfig+0x240>)
 80015c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015ca:	f003 0302 	and.w	r3, r3, #2
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d0f0      	beq.n	80015b4 <HAL_RCC_OscConfig+0x200>
 80015d2:	e01b      	b.n	800160c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015d4:	4b09      	ldr	r3, [pc, #36]	@ (80015fc <HAL_RCC_OscConfig+0x248>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015da:	f7ff fb8d 	bl	8000cf8 <HAL_GetTick>
 80015de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015e0:	e00e      	b.n	8001600 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015e2:	f7ff fb89 	bl	8000cf8 <HAL_GetTick>
 80015e6:	4602      	mov	r2, r0
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	2b02      	cmp	r3, #2
 80015ee:	d907      	bls.n	8001600 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80015f0:	2303      	movs	r3, #3
 80015f2:	e150      	b.n	8001896 <HAL_RCC_OscConfig+0x4e2>
 80015f4:	40023800 	.word	0x40023800
 80015f8:	42470000 	.word	0x42470000
 80015fc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001600:	4b88      	ldr	r3, [pc, #544]	@ (8001824 <HAL_RCC_OscConfig+0x470>)
 8001602:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001604:	f003 0302 	and.w	r3, r3, #2
 8001608:	2b00      	cmp	r3, #0
 800160a:	d1ea      	bne.n	80015e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f003 0304 	and.w	r3, r3, #4
 8001614:	2b00      	cmp	r3, #0
 8001616:	f000 8097 	beq.w	8001748 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800161a:	2300      	movs	r3, #0
 800161c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800161e:	4b81      	ldr	r3, [pc, #516]	@ (8001824 <HAL_RCC_OscConfig+0x470>)
 8001620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001622:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d10f      	bne.n	800164a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800162a:	2300      	movs	r3, #0
 800162c:	60bb      	str	r3, [r7, #8]
 800162e:	4b7d      	ldr	r3, [pc, #500]	@ (8001824 <HAL_RCC_OscConfig+0x470>)
 8001630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001632:	4a7c      	ldr	r2, [pc, #496]	@ (8001824 <HAL_RCC_OscConfig+0x470>)
 8001634:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001638:	6413      	str	r3, [r2, #64]	@ 0x40
 800163a:	4b7a      	ldr	r3, [pc, #488]	@ (8001824 <HAL_RCC_OscConfig+0x470>)
 800163c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800163e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001642:	60bb      	str	r3, [r7, #8]
 8001644:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001646:	2301      	movs	r3, #1
 8001648:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800164a:	4b77      	ldr	r3, [pc, #476]	@ (8001828 <HAL_RCC_OscConfig+0x474>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001652:	2b00      	cmp	r3, #0
 8001654:	d118      	bne.n	8001688 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001656:	4b74      	ldr	r3, [pc, #464]	@ (8001828 <HAL_RCC_OscConfig+0x474>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a73      	ldr	r2, [pc, #460]	@ (8001828 <HAL_RCC_OscConfig+0x474>)
 800165c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001660:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001662:	f7ff fb49 	bl	8000cf8 <HAL_GetTick>
 8001666:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001668:	e008      	b.n	800167c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800166a:	f7ff fb45 	bl	8000cf8 <HAL_GetTick>
 800166e:	4602      	mov	r2, r0
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	2b02      	cmp	r3, #2
 8001676:	d901      	bls.n	800167c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001678:	2303      	movs	r3, #3
 800167a:	e10c      	b.n	8001896 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800167c:	4b6a      	ldr	r3, [pc, #424]	@ (8001828 <HAL_RCC_OscConfig+0x474>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001684:	2b00      	cmp	r3, #0
 8001686:	d0f0      	beq.n	800166a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	2b01      	cmp	r3, #1
 800168e:	d106      	bne.n	800169e <HAL_RCC_OscConfig+0x2ea>
 8001690:	4b64      	ldr	r3, [pc, #400]	@ (8001824 <HAL_RCC_OscConfig+0x470>)
 8001692:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001694:	4a63      	ldr	r2, [pc, #396]	@ (8001824 <HAL_RCC_OscConfig+0x470>)
 8001696:	f043 0301 	orr.w	r3, r3, #1
 800169a:	6713      	str	r3, [r2, #112]	@ 0x70
 800169c:	e01c      	b.n	80016d8 <HAL_RCC_OscConfig+0x324>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	2b05      	cmp	r3, #5
 80016a4:	d10c      	bne.n	80016c0 <HAL_RCC_OscConfig+0x30c>
 80016a6:	4b5f      	ldr	r3, [pc, #380]	@ (8001824 <HAL_RCC_OscConfig+0x470>)
 80016a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016aa:	4a5e      	ldr	r2, [pc, #376]	@ (8001824 <HAL_RCC_OscConfig+0x470>)
 80016ac:	f043 0304 	orr.w	r3, r3, #4
 80016b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80016b2:	4b5c      	ldr	r3, [pc, #368]	@ (8001824 <HAL_RCC_OscConfig+0x470>)
 80016b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016b6:	4a5b      	ldr	r2, [pc, #364]	@ (8001824 <HAL_RCC_OscConfig+0x470>)
 80016b8:	f043 0301 	orr.w	r3, r3, #1
 80016bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80016be:	e00b      	b.n	80016d8 <HAL_RCC_OscConfig+0x324>
 80016c0:	4b58      	ldr	r3, [pc, #352]	@ (8001824 <HAL_RCC_OscConfig+0x470>)
 80016c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016c4:	4a57      	ldr	r2, [pc, #348]	@ (8001824 <HAL_RCC_OscConfig+0x470>)
 80016c6:	f023 0301 	bic.w	r3, r3, #1
 80016ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80016cc:	4b55      	ldr	r3, [pc, #340]	@ (8001824 <HAL_RCC_OscConfig+0x470>)
 80016ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016d0:	4a54      	ldr	r2, [pc, #336]	@ (8001824 <HAL_RCC_OscConfig+0x470>)
 80016d2:	f023 0304 	bic.w	r3, r3, #4
 80016d6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d015      	beq.n	800170c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016e0:	f7ff fb0a 	bl	8000cf8 <HAL_GetTick>
 80016e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016e6:	e00a      	b.n	80016fe <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016e8:	f7ff fb06 	bl	8000cf8 <HAL_GetTick>
 80016ec:	4602      	mov	r2, r0
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d901      	bls.n	80016fe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80016fa:	2303      	movs	r3, #3
 80016fc:	e0cb      	b.n	8001896 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016fe:	4b49      	ldr	r3, [pc, #292]	@ (8001824 <HAL_RCC_OscConfig+0x470>)
 8001700:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001702:	f003 0302 	and.w	r3, r3, #2
 8001706:	2b00      	cmp	r3, #0
 8001708:	d0ee      	beq.n	80016e8 <HAL_RCC_OscConfig+0x334>
 800170a:	e014      	b.n	8001736 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800170c:	f7ff faf4 	bl	8000cf8 <HAL_GetTick>
 8001710:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001712:	e00a      	b.n	800172a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001714:	f7ff faf0 	bl	8000cf8 <HAL_GetTick>
 8001718:	4602      	mov	r2, r0
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001722:	4293      	cmp	r3, r2
 8001724:	d901      	bls.n	800172a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001726:	2303      	movs	r3, #3
 8001728:	e0b5      	b.n	8001896 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800172a:	4b3e      	ldr	r3, [pc, #248]	@ (8001824 <HAL_RCC_OscConfig+0x470>)
 800172c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800172e:	f003 0302 	and.w	r3, r3, #2
 8001732:	2b00      	cmp	r3, #0
 8001734:	d1ee      	bne.n	8001714 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001736:	7dfb      	ldrb	r3, [r7, #23]
 8001738:	2b01      	cmp	r3, #1
 800173a:	d105      	bne.n	8001748 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800173c:	4b39      	ldr	r3, [pc, #228]	@ (8001824 <HAL_RCC_OscConfig+0x470>)
 800173e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001740:	4a38      	ldr	r2, [pc, #224]	@ (8001824 <HAL_RCC_OscConfig+0x470>)
 8001742:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001746:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	699b      	ldr	r3, [r3, #24]
 800174c:	2b00      	cmp	r3, #0
 800174e:	f000 80a1 	beq.w	8001894 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001752:	4b34      	ldr	r3, [pc, #208]	@ (8001824 <HAL_RCC_OscConfig+0x470>)
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	f003 030c 	and.w	r3, r3, #12
 800175a:	2b08      	cmp	r3, #8
 800175c:	d05c      	beq.n	8001818 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	699b      	ldr	r3, [r3, #24]
 8001762:	2b02      	cmp	r3, #2
 8001764:	d141      	bne.n	80017ea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001766:	4b31      	ldr	r3, [pc, #196]	@ (800182c <HAL_RCC_OscConfig+0x478>)
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800176c:	f7ff fac4 	bl	8000cf8 <HAL_GetTick>
 8001770:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001772:	e008      	b.n	8001786 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001774:	f7ff fac0 	bl	8000cf8 <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	2b02      	cmp	r3, #2
 8001780:	d901      	bls.n	8001786 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	e087      	b.n	8001896 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001786:	4b27      	ldr	r3, [pc, #156]	@ (8001824 <HAL_RCC_OscConfig+0x470>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d1f0      	bne.n	8001774 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	69da      	ldr	r2, [r3, #28]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6a1b      	ldr	r3, [r3, #32]
 800179a:	431a      	orrs	r2, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017a0:	019b      	lsls	r3, r3, #6
 80017a2:	431a      	orrs	r2, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017a8:	085b      	lsrs	r3, r3, #1
 80017aa:	3b01      	subs	r3, #1
 80017ac:	041b      	lsls	r3, r3, #16
 80017ae:	431a      	orrs	r2, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017b4:	061b      	lsls	r3, r3, #24
 80017b6:	491b      	ldr	r1, [pc, #108]	@ (8001824 <HAL_RCC_OscConfig+0x470>)
 80017b8:	4313      	orrs	r3, r2
 80017ba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017bc:	4b1b      	ldr	r3, [pc, #108]	@ (800182c <HAL_RCC_OscConfig+0x478>)
 80017be:	2201      	movs	r2, #1
 80017c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c2:	f7ff fa99 	bl	8000cf8 <HAL_GetTick>
 80017c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017c8:	e008      	b.n	80017dc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017ca:	f7ff fa95 	bl	8000cf8 <HAL_GetTick>
 80017ce:	4602      	mov	r2, r0
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d901      	bls.n	80017dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80017d8:	2303      	movs	r3, #3
 80017da:	e05c      	b.n	8001896 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017dc:	4b11      	ldr	r3, [pc, #68]	@ (8001824 <HAL_RCC_OscConfig+0x470>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d0f0      	beq.n	80017ca <HAL_RCC_OscConfig+0x416>
 80017e8:	e054      	b.n	8001894 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017ea:	4b10      	ldr	r3, [pc, #64]	@ (800182c <HAL_RCC_OscConfig+0x478>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f0:	f7ff fa82 	bl	8000cf8 <HAL_GetTick>
 80017f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017f6:	e008      	b.n	800180a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017f8:	f7ff fa7e 	bl	8000cf8 <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	2b02      	cmp	r3, #2
 8001804:	d901      	bls.n	800180a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001806:	2303      	movs	r3, #3
 8001808:	e045      	b.n	8001896 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800180a:	4b06      	ldr	r3, [pc, #24]	@ (8001824 <HAL_RCC_OscConfig+0x470>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d1f0      	bne.n	80017f8 <HAL_RCC_OscConfig+0x444>
 8001816:	e03d      	b.n	8001894 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	699b      	ldr	r3, [r3, #24]
 800181c:	2b01      	cmp	r3, #1
 800181e:	d107      	bne.n	8001830 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	e038      	b.n	8001896 <HAL_RCC_OscConfig+0x4e2>
 8001824:	40023800 	.word	0x40023800
 8001828:	40007000 	.word	0x40007000
 800182c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001830:	4b1b      	ldr	r3, [pc, #108]	@ (80018a0 <HAL_RCC_OscConfig+0x4ec>)
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	699b      	ldr	r3, [r3, #24]
 800183a:	2b01      	cmp	r3, #1
 800183c:	d028      	beq.n	8001890 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001848:	429a      	cmp	r2, r3
 800184a:	d121      	bne.n	8001890 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001856:	429a      	cmp	r2, r3
 8001858:	d11a      	bne.n	8001890 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800185a:	68fa      	ldr	r2, [r7, #12]
 800185c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001860:	4013      	ands	r3, r2
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001866:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001868:	4293      	cmp	r3, r2
 800186a:	d111      	bne.n	8001890 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001876:	085b      	lsrs	r3, r3, #1
 8001878:	3b01      	subs	r3, #1
 800187a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800187c:	429a      	cmp	r2, r3
 800187e:	d107      	bne.n	8001890 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800188a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800188c:	429a      	cmp	r2, r3
 800188e:	d001      	beq.n	8001894 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	e000      	b.n	8001896 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001894:	2300      	movs	r3, #0
}
 8001896:	4618      	mov	r0, r3
 8001898:	3718      	adds	r7, #24
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	40023800 	.word	0x40023800

080018a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d101      	bne.n	80018b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e0cc      	b.n	8001a52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018b8:	4b68      	ldr	r3, [pc, #416]	@ (8001a5c <HAL_RCC_ClockConfig+0x1b8>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 0307 	and.w	r3, r3, #7
 80018c0:	683a      	ldr	r2, [r7, #0]
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d90c      	bls.n	80018e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018c6:	4b65      	ldr	r3, [pc, #404]	@ (8001a5c <HAL_RCC_ClockConfig+0x1b8>)
 80018c8:	683a      	ldr	r2, [r7, #0]
 80018ca:	b2d2      	uxtb	r2, r2
 80018cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ce:	4b63      	ldr	r3, [pc, #396]	@ (8001a5c <HAL_RCC_ClockConfig+0x1b8>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0307 	and.w	r3, r3, #7
 80018d6:	683a      	ldr	r2, [r7, #0]
 80018d8:	429a      	cmp	r2, r3
 80018da:	d001      	beq.n	80018e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e0b8      	b.n	8001a52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0302 	and.w	r3, r3, #2
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d020      	beq.n	800192e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 0304 	and.w	r3, r3, #4
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d005      	beq.n	8001904 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018f8:	4b59      	ldr	r3, [pc, #356]	@ (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	4a58      	ldr	r2, [pc, #352]	@ (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 80018fe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001902:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 0308 	and.w	r3, r3, #8
 800190c:	2b00      	cmp	r3, #0
 800190e:	d005      	beq.n	800191c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001910:	4b53      	ldr	r3, [pc, #332]	@ (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	4a52      	ldr	r2, [pc, #328]	@ (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 8001916:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800191a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800191c:	4b50      	ldr	r3, [pc, #320]	@ (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	494d      	ldr	r1, [pc, #308]	@ (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 800192a:	4313      	orrs	r3, r2
 800192c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 0301 	and.w	r3, r3, #1
 8001936:	2b00      	cmp	r3, #0
 8001938:	d044      	beq.n	80019c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	2b01      	cmp	r3, #1
 8001940:	d107      	bne.n	8001952 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001942:	4b47      	ldr	r3, [pc, #284]	@ (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d119      	bne.n	8001982 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e07f      	b.n	8001a52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	2b02      	cmp	r3, #2
 8001958:	d003      	beq.n	8001962 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800195e:	2b03      	cmp	r3, #3
 8001960:	d107      	bne.n	8001972 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001962:	4b3f      	ldr	r3, [pc, #252]	@ (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d109      	bne.n	8001982 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e06f      	b.n	8001a52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001972:	4b3b      	ldr	r3, [pc, #236]	@ (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 0302 	and.w	r3, r3, #2
 800197a:	2b00      	cmp	r3, #0
 800197c:	d101      	bne.n	8001982 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e067      	b.n	8001a52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001982:	4b37      	ldr	r3, [pc, #220]	@ (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	f023 0203 	bic.w	r2, r3, #3
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	4934      	ldr	r1, [pc, #208]	@ (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 8001990:	4313      	orrs	r3, r2
 8001992:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001994:	f7ff f9b0 	bl	8000cf8 <HAL_GetTick>
 8001998:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800199a:	e00a      	b.n	80019b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800199c:	f7ff f9ac 	bl	8000cf8 <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d901      	bls.n	80019b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e04f      	b.n	8001a52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019b2:	4b2b      	ldr	r3, [pc, #172]	@ (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	f003 020c 	and.w	r2, r3, #12
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d1eb      	bne.n	800199c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019c4:	4b25      	ldr	r3, [pc, #148]	@ (8001a5c <HAL_RCC_ClockConfig+0x1b8>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0307 	and.w	r3, r3, #7
 80019cc:	683a      	ldr	r2, [r7, #0]
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d20c      	bcs.n	80019ec <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019d2:	4b22      	ldr	r3, [pc, #136]	@ (8001a5c <HAL_RCC_ClockConfig+0x1b8>)
 80019d4:	683a      	ldr	r2, [r7, #0]
 80019d6:	b2d2      	uxtb	r2, r2
 80019d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019da:	4b20      	ldr	r3, [pc, #128]	@ (8001a5c <HAL_RCC_ClockConfig+0x1b8>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0307 	and.w	r3, r3, #7
 80019e2:	683a      	ldr	r2, [r7, #0]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d001      	beq.n	80019ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e032      	b.n	8001a52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0304 	and.w	r3, r3, #4
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d008      	beq.n	8001a0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019f8:	4b19      	ldr	r3, [pc, #100]	@ (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	4916      	ldr	r1, [pc, #88]	@ (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 8001a06:	4313      	orrs	r3, r2
 8001a08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0308 	and.w	r3, r3, #8
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d009      	beq.n	8001a2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a16:	4b12      	ldr	r3, [pc, #72]	@ (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	691b      	ldr	r3, [r3, #16]
 8001a22:	00db      	lsls	r3, r3, #3
 8001a24:	490e      	ldr	r1, [pc, #56]	@ (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 8001a26:	4313      	orrs	r3, r2
 8001a28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a2a:	f000 f821 	bl	8001a70 <HAL_RCC_GetSysClockFreq>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	4b0b      	ldr	r3, [pc, #44]	@ (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	091b      	lsrs	r3, r3, #4
 8001a36:	f003 030f 	and.w	r3, r3, #15
 8001a3a:	490a      	ldr	r1, [pc, #40]	@ (8001a64 <HAL_RCC_ClockConfig+0x1c0>)
 8001a3c:	5ccb      	ldrb	r3, [r1, r3]
 8001a3e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a42:	4a09      	ldr	r2, [pc, #36]	@ (8001a68 <HAL_RCC_ClockConfig+0x1c4>)
 8001a44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001a46:	4b09      	ldr	r3, [pc, #36]	@ (8001a6c <HAL_RCC_ClockConfig+0x1c8>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7ff f910 	bl	8000c70 <HAL_InitTick>

  return HAL_OK;
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3710      	adds	r7, #16
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	40023c00 	.word	0x40023c00
 8001a60:	40023800 	.word	0x40023800
 8001a64:	08003740 	.word	0x08003740
 8001a68:	20000000 	.word	0x20000000
 8001a6c:	20000004 	.word	0x20000004

08001a70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a74:	b094      	sub	sp, #80	@ 0x50
 8001a76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001a80:	2300      	movs	r3, #0
 8001a82:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001a84:	2300      	movs	r3, #0
 8001a86:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a88:	4b79      	ldr	r3, [pc, #484]	@ (8001c70 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	f003 030c 	and.w	r3, r3, #12
 8001a90:	2b08      	cmp	r3, #8
 8001a92:	d00d      	beq.n	8001ab0 <HAL_RCC_GetSysClockFreq+0x40>
 8001a94:	2b08      	cmp	r3, #8
 8001a96:	f200 80e1 	bhi.w	8001c5c <HAL_RCC_GetSysClockFreq+0x1ec>
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d002      	beq.n	8001aa4 <HAL_RCC_GetSysClockFreq+0x34>
 8001a9e:	2b04      	cmp	r3, #4
 8001aa0:	d003      	beq.n	8001aaa <HAL_RCC_GetSysClockFreq+0x3a>
 8001aa2:	e0db      	b.n	8001c5c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001aa4:	4b73      	ldr	r3, [pc, #460]	@ (8001c74 <HAL_RCC_GetSysClockFreq+0x204>)
 8001aa6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001aa8:	e0db      	b.n	8001c62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001aaa:	4b73      	ldr	r3, [pc, #460]	@ (8001c78 <HAL_RCC_GetSysClockFreq+0x208>)
 8001aac:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001aae:	e0d8      	b.n	8001c62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ab0:	4b6f      	ldr	r3, [pc, #444]	@ (8001c70 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001ab8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001aba:	4b6d      	ldr	r3, [pc, #436]	@ (8001c70 <HAL_RCC_GetSysClockFreq+0x200>)
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d063      	beq.n	8001b8e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ac6:	4b6a      	ldr	r3, [pc, #424]	@ (8001c70 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	099b      	lsrs	r3, r3, #6
 8001acc:	2200      	movs	r2, #0
 8001ace:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001ad0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001ad2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ad4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ad8:	633b      	str	r3, [r7, #48]	@ 0x30
 8001ada:	2300      	movs	r3, #0
 8001adc:	637b      	str	r3, [r7, #52]	@ 0x34
 8001ade:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001ae2:	4622      	mov	r2, r4
 8001ae4:	462b      	mov	r3, r5
 8001ae6:	f04f 0000 	mov.w	r0, #0
 8001aea:	f04f 0100 	mov.w	r1, #0
 8001aee:	0159      	lsls	r1, r3, #5
 8001af0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001af4:	0150      	lsls	r0, r2, #5
 8001af6:	4602      	mov	r2, r0
 8001af8:	460b      	mov	r3, r1
 8001afa:	4621      	mov	r1, r4
 8001afc:	1a51      	subs	r1, r2, r1
 8001afe:	6139      	str	r1, [r7, #16]
 8001b00:	4629      	mov	r1, r5
 8001b02:	eb63 0301 	sbc.w	r3, r3, r1
 8001b06:	617b      	str	r3, [r7, #20]
 8001b08:	f04f 0200 	mov.w	r2, #0
 8001b0c:	f04f 0300 	mov.w	r3, #0
 8001b10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001b14:	4659      	mov	r1, fp
 8001b16:	018b      	lsls	r3, r1, #6
 8001b18:	4651      	mov	r1, sl
 8001b1a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b1e:	4651      	mov	r1, sl
 8001b20:	018a      	lsls	r2, r1, #6
 8001b22:	4651      	mov	r1, sl
 8001b24:	ebb2 0801 	subs.w	r8, r2, r1
 8001b28:	4659      	mov	r1, fp
 8001b2a:	eb63 0901 	sbc.w	r9, r3, r1
 8001b2e:	f04f 0200 	mov.w	r2, #0
 8001b32:	f04f 0300 	mov.w	r3, #0
 8001b36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b42:	4690      	mov	r8, r2
 8001b44:	4699      	mov	r9, r3
 8001b46:	4623      	mov	r3, r4
 8001b48:	eb18 0303 	adds.w	r3, r8, r3
 8001b4c:	60bb      	str	r3, [r7, #8]
 8001b4e:	462b      	mov	r3, r5
 8001b50:	eb49 0303 	adc.w	r3, r9, r3
 8001b54:	60fb      	str	r3, [r7, #12]
 8001b56:	f04f 0200 	mov.w	r2, #0
 8001b5a:	f04f 0300 	mov.w	r3, #0
 8001b5e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001b62:	4629      	mov	r1, r5
 8001b64:	024b      	lsls	r3, r1, #9
 8001b66:	4621      	mov	r1, r4
 8001b68:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001b6c:	4621      	mov	r1, r4
 8001b6e:	024a      	lsls	r2, r1, #9
 8001b70:	4610      	mov	r0, r2
 8001b72:	4619      	mov	r1, r3
 8001b74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b76:	2200      	movs	r2, #0
 8001b78:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b7a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001b7c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001b80:	f7fe fb7e 	bl	8000280 <__aeabi_uldivmod>
 8001b84:	4602      	mov	r2, r0
 8001b86:	460b      	mov	r3, r1
 8001b88:	4613      	mov	r3, r2
 8001b8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001b8c:	e058      	b.n	8001c40 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b8e:	4b38      	ldr	r3, [pc, #224]	@ (8001c70 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	099b      	lsrs	r3, r3, #6
 8001b94:	2200      	movs	r2, #0
 8001b96:	4618      	mov	r0, r3
 8001b98:	4611      	mov	r1, r2
 8001b9a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001b9e:	623b      	str	r3, [r7, #32]
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ba4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001ba8:	4642      	mov	r2, r8
 8001baa:	464b      	mov	r3, r9
 8001bac:	f04f 0000 	mov.w	r0, #0
 8001bb0:	f04f 0100 	mov.w	r1, #0
 8001bb4:	0159      	lsls	r1, r3, #5
 8001bb6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bba:	0150      	lsls	r0, r2, #5
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	460b      	mov	r3, r1
 8001bc0:	4641      	mov	r1, r8
 8001bc2:	ebb2 0a01 	subs.w	sl, r2, r1
 8001bc6:	4649      	mov	r1, r9
 8001bc8:	eb63 0b01 	sbc.w	fp, r3, r1
 8001bcc:	f04f 0200 	mov.w	r2, #0
 8001bd0:	f04f 0300 	mov.w	r3, #0
 8001bd4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001bd8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001bdc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001be0:	ebb2 040a 	subs.w	r4, r2, sl
 8001be4:	eb63 050b 	sbc.w	r5, r3, fp
 8001be8:	f04f 0200 	mov.w	r2, #0
 8001bec:	f04f 0300 	mov.w	r3, #0
 8001bf0:	00eb      	lsls	r3, r5, #3
 8001bf2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001bf6:	00e2      	lsls	r2, r4, #3
 8001bf8:	4614      	mov	r4, r2
 8001bfa:	461d      	mov	r5, r3
 8001bfc:	4643      	mov	r3, r8
 8001bfe:	18e3      	adds	r3, r4, r3
 8001c00:	603b      	str	r3, [r7, #0]
 8001c02:	464b      	mov	r3, r9
 8001c04:	eb45 0303 	adc.w	r3, r5, r3
 8001c08:	607b      	str	r3, [r7, #4]
 8001c0a:	f04f 0200 	mov.w	r2, #0
 8001c0e:	f04f 0300 	mov.w	r3, #0
 8001c12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c16:	4629      	mov	r1, r5
 8001c18:	028b      	lsls	r3, r1, #10
 8001c1a:	4621      	mov	r1, r4
 8001c1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c20:	4621      	mov	r1, r4
 8001c22:	028a      	lsls	r2, r1, #10
 8001c24:	4610      	mov	r0, r2
 8001c26:	4619      	mov	r1, r3
 8001c28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	61bb      	str	r3, [r7, #24]
 8001c2e:	61fa      	str	r2, [r7, #28]
 8001c30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c34:	f7fe fb24 	bl	8000280 <__aeabi_uldivmod>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001c40:	4b0b      	ldr	r3, [pc, #44]	@ (8001c70 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	0c1b      	lsrs	r3, r3, #16
 8001c46:	f003 0303 	and.w	r3, r3, #3
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001c50:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001c52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c54:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c58:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001c5a:	e002      	b.n	8001c62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c5c:	4b05      	ldr	r3, [pc, #20]	@ (8001c74 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c5e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001c60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3750      	adds	r7, #80	@ 0x50
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c6e:	bf00      	nop
 8001c70:	40023800 	.word	0x40023800
 8001c74:	00f42400 	.word	0x00f42400
 8001c78:	007a1200 	.word	0x007a1200

08001c7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c80:	4b03      	ldr	r3, [pc, #12]	@ (8001c90 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c82:	681b      	ldr	r3, [r3, #0]
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	20000000 	.word	0x20000000

08001c94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c98:	f7ff fff0 	bl	8001c7c <HAL_RCC_GetHCLKFreq>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	4b05      	ldr	r3, [pc, #20]	@ (8001cb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	0a9b      	lsrs	r3, r3, #10
 8001ca4:	f003 0307 	and.w	r3, r3, #7
 8001ca8:	4903      	ldr	r1, [pc, #12]	@ (8001cb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001caa:	5ccb      	ldrb	r3, [r1, r3]
 8001cac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	40023800 	.word	0x40023800
 8001cb8:	08003750 	.word	0x08003750

08001cbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001cc0:	f7ff ffdc 	bl	8001c7c <HAL_RCC_GetHCLKFreq>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	4b05      	ldr	r3, [pc, #20]	@ (8001cdc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	0b5b      	lsrs	r3, r3, #13
 8001ccc:	f003 0307 	and.w	r3, r3, #7
 8001cd0:	4903      	ldr	r1, [pc, #12]	@ (8001ce0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cd2:	5ccb      	ldrb	r3, [r1, r3]
 8001cd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	40023800 	.word	0x40023800
 8001ce0:	08003750 	.word	0x08003750

08001ce4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b086      	sub	sp, #24
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001cec:	2300      	movs	r3, #0
 8001cee:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0301 	and.w	r3, r3, #1
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d105      	bne.n	8001d0c <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d035      	beq.n	8001d78 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001d0c:	4b62      	ldr	r3, [pc, #392]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001d12:	f7fe fff1 	bl	8000cf8 <HAL_GetTick>
 8001d16:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001d18:	e008      	b.n	8001d2c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001d1a:	f7fe ffed 	bl	8000cf8 <HAL_GetTick>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	d901      	bls.n	8001d2c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	e0b0      	b.n	8001e8e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001d2c:	4b5b      	ldr	r3, [pc, #364]	@ (8001e9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d1f0      	bne.n	8001d1a <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	019a      	lsls	r2, r3, #6
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	071b      	lsls	r3, r3, #28
 8001d44:	4955      	ldr	r1, [pc, #340]	@ (8001e9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001d46:	4313      	orrs	r3, r2
 8001d48:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001d4c:	4b52      	ldr	r3, [pc, #328]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8001d4e:	2201      	movs	r2, #1
 8001d50:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001d52:	f7fe ffd1 	bl	8000cf8 <HAL_GetTick>
 8001d56:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001d58:	e008      	b.n	8001d6c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001d5a:	f7fe ffcd 	bl	8000cf8 <HAL_GetTick>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d901      	bls.n	8001d6c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	e090      	b.n	8001e8e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001d6c:	4b4b      	ldr	r3, [pc, #300]	@ (8001e9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d0f0      	beq.n	8001d5a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 0302 	and.w	r3, r3, #2
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	f000 8083 	beq.w	8001e8c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d86:	2300      	movs	r3, #0
 8001d88:	60fb      	str	r3, [r7, #12]
 8001d8a:	4b44      	ldr	r3, [pc, #272]	@ (8001e9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d8e:	4a43      	ldr	r2, [pc, #268]	@ (8001e9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001d90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d94:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d96:	4b41      	ldr	r3, [pc, #260]	@ (8001e9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d9e:	60fb      	str	r3, [r7, #12]
 8001da0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001da2:	4b3f      	ldr	r3, [pc, #252]	@ (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a3e      	ldr	r2, [pc, #248]	@ (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001da8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dac:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001dae:	f7fe ffa3 	bl	8000cf8 <HAL_GetTick>
 8001db2:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8001db4:	e008      	b.n	8001dc8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001db6:	f7fe ff9f 	bl	8000cf8 <HAL_GetTick>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d901      	bls.n	8001dc8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	e062      	b.n	8001e8e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8001dc8:	4b35      	ldr	r3, [pc, #212]	@ (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d0f0      	beq.n	8001db6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001dd4:	4b31      	ldr	r3, [pc, #196]	@ (8001e9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001dd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dd8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ddc:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d02f      	beq.n	8001e44 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001dec:	693a      	ldr	r2, [r7, #16]
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d028      	beq.n	8001e44 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001df2:	4b2a      	ldr	r3, [pc, #168]	@ (8001e9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001df4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001df6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001dfa:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001dfc:	4b29      	ldr	r3, [pc, #164]	@ (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001dfe:	2201      	movs	r2, #1
 8001e00:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e02:	4b28      	ldr	r3, [pc, #160]	@ (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001e08:	4a24      	ldr	r2, [pc, #144]	@ (8001e9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001e0e:	4b23      	ldr	r3, [pc, #140]	@ (8001e9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001e10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e12:	f003 0301 	and.w	r3, r3, #1
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d114      	bne.n	8001e44 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001e1a:	f7fe ff6d 	bl	8000cf8 <HAL_GetTick>
 8001e1e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e20:	e00a      	b.n	8001e38 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e22:	f7fe ff69 	bl	8000cf8 <HAL_GetTick>
 8001e26:	4602      	mov	r2, r0
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d901      	bls.n	8001e38 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8001e34:	2303      	movs	r3, #3
 8001e36:	e02a      	b.n	8001e8e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e38:	4b18      	ldr	r3, [pc, #96]	@ (8001e9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001e3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e3c:	f003 0302 	and.w	r3, r3, #2
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d0ee      	beq.n	8001e22 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e4c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001e50:	d10d      	bne.n	8001e6e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8001e52:	4b12      	ldr	r3, [pc, #72]	@ (8001e9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	68db      	ldr	r3, [r3, #12]
 8001e5e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8001e62:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001e66:	490d      	ldr	r1, [pc, #52]	@ (8001e9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	608b      	str	r3, [r1, #8]
 8001e6c:	e005      	b.n	8001e7a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8001e6e:	4b0b      	ldr	r3, [pc, #44]	@ (8001e9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	4a0a      	ldr	r2, [pc, #40]	@ (8001e9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001e74:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8001e78:	6093      	str	r3, [r2, #8]
 8001e7a:	4b08      	ldr	r3, [pc, #32]	@ (8001e9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001e7c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	68db      	ldr	r3, [r3, #12]
 8001e82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e86:	4905      	ldr	r1, [pc, #20]	@ (8001e9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8001e8c:	2300      	movs	r3, #0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3718      	adds	r7, #24
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	42470068 	.word	0x42470068
 8001e9c:	40023800 	.word	0x40023800
 8001ea0:	40007000 	.word	0x40007000
 8001ea4:	42470e40 	.word	0x42470e40

08001ea8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d101      	bne.n	8001ebe <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e073      	b.n	8001fa6 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	7f5b      	ldrb	r3, [r3, #29]
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d105      	bne.n	8001ed4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f7fe fe00 	bl	8000ad4 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2202      	movs	r2, #2
 8001ed8:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	f003 0310 	and.w	r3, r3, #16
 8001ee4:	2b10      	cmp	r3, #16
 8001ee6:	d055      	beq.n	8001f94 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	22ca      	movs	r2, #202	@ 0xca
 8001eee:	625a      	str	r2, [r3, #36]	@ 0x24
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2253      	movs	r2, #83	@ 0x53
 8001ef6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f000 fa49 	bl	8002390 <RTC_EnterInitMode>
 8001efe:	4603      	mov	r3, r0
 8001f00:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8001f02:	7bfb      	ldrb	r3, [r7, #15]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d12c      	bne.n	8001f62 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	6812      	ldr	r2, [r2, #0]
 8001f12:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8001f16:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001f1a:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	6899      	ldr	r1, [r3, #8]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685a      	ldr	r2, [r3, #4]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	691b      	ldr	r3, [r3, #16]
 8001f2a:	431a      	orrs	r2, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	695b      	ldr	r3, [r3, #20]
 8001f30:	431a      	orrs	r2, r3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	430a      	orrs	r2, r1
 8001f38:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	68d2      	ldr	r2, [r2, #12]
 8001f42:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	6919      	ldr	r1, [r3, #16]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	041a      	lsls	r2, r3, #16
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	430a      	orrs	r2, r1
 8001f56:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f000 fa50 	bl	80023fe <RTC_ExitInitMode>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8001f62:	7bfb      	ldrb	r3, [r7, #15]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d110      	bne.n	8001f8a <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001f76:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	699a      	ldr	r2, [r3, #24]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	430a      	orrs	r2, r1
 8001f88:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	22ff      	movs	r2, #255	@ 0xff
 8001f90:	625a      	str	r2, [r3, #36]	@ 0x24
 8001f92:	e001      	b.n	8001f98 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8001f94:	2300      	movs	r3, #0
 8001f96:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8001f98:	7bfb      	ldrb	r3, [r7, #15]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d102      	bne.n	8001fa4 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8001fa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3710      	adds	r7, #16
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}

08001fae <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001fae:	b590      	push	{r4, r7, lr}
 8001fb0:	b087      	sub	sp, #28
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	60f8      	str	r0, [r7, #12]
 8001fb6:	60b9      	str	r1, [r7, #8]
 8001fb8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	7f1b      	ldrb	r3, [r3, #28]
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d101      	bne.n	8001fca <HAL_RTC_SetTime+0x1c>
 8001fc6:	2302      	movs	r3, #2
 8001fc8:	e087      	b.n	80020da <HAL_RTC_SetTime+0x12c>
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2201      	movs	r2, #1
 8001fce:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2202      	movs	r2, #2
 8001fd4:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d126      	bne.n	800202a <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d102      	bne.n	8001ff0 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	2200      	movs	r2, #0
 8001fee:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f000 fa27 	bl	8002448 <RTC_ByteToBcd2>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	785b      	ldrb	r3, [r3, #1]
 8002002:	4618      	mov	r0, r3
 8002004:	f000 fa20 	bl	8002448 <RTC_ByteToBcd2>
 8002008:	4603      	mov	r3, r0
 800200a:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800200c:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	789b      	ldrb	r3, [r3, #2]
 8002012:	4618      	mov	r0, r3
 8002014:	f000 fa18 	bl	8002448 <RTC_ByteToBcd2>
 8002018:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800201a:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	78db      	ldrb	r3, [r3, #3]
 8002022:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002024:	4313      	orrs	r3, r2
 8002026:	617b      	str	r3, [r7, #20]
 8002028:	e018      	b.n	800205c <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002034:	2b00      	cmp	r3, #0
 8002036:	d102      	bne.n	800203e <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	2200      	movs	r2, #0
 800203c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	785b      	ldrb	r3, [r3, #1]
 8002048:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800204a:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800204c:	68ba      	ldr	r2, [r7, #8]
 800204e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002050:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	78db      	ldrb	r3, [r3, #3]
 8002056:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002058:	4313      	orrs	r3, r2
 800205a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	22ca      	movs	r2, #202	@ 0xca
 8002062:	625a      	str	r2, [r3, #36]	@ 0x24
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	2253      	movs	r2, #83	@ 0x53
 800206a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800206c:	68f8      	ldr	r0, [r7, #12]
 800206e:	f000 f98f 	bl	8002390 <RTC_EnterInitMode>
 8002072:	4603      	mov	r3, r0
 8002074:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8002076:	7cfb      	ldrb	r3, [r7, #19]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d120      	bne.n	80020be <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8002086:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800208a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	689a      	ldr	r2, [r3, #8]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800209a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	6899      	ldr	r1, [r3, #8]
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	68da      	ldr	r2, [r3, #12]
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	691b      	ldr	r3, [r3, #16]
 80020aa:	431a      	orrs	r2, r3
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	430a      	orrs	r2, r1
 80020b2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80020b4:	68f8      	ldr	r0, [r7, #12]
 80020b6:	f000 f9a2 	bl	80023fe <RTC_ExitInitMode>
 80020ba:	4603      	mov	r3, r0
 80020bc:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80020be:	7cfb      	ldrb	r3, [r7, #19]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d102      	bne.n	80020ca <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2201      	movs	r2, #1
 80020c8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	22ff      	movs	r2, #255	@ 0xff
 80020d0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2200      	movs	r2, #0
 80020d6:	771a      	strb	r2, [r3, #28]

  return status;
 80020d8:	7cfb      	ldrb	r3, [r7, #19]
}
 80020da:	4618      	mov	r0, r3
 80020dc:	371c      	adds	r7, #28
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd90      	pop	{r4, r7, pc}

080020e2 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80020e2:	b580      	push	{r7, lr}
 80020e4:	b086      	sub	sp, #24
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	60f8      	str	r0, [r7, #12]
 80020ea:	60b9      	str	r1, [r7, #8]
 80020ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80020ee:	2300      	movs	r3, #0
 80020f0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	691b      	ldr	r3, [r3, #16]
 8002102:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8002114:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8002118:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	0c1b      	lsrs	r3, r3, #16
 800211e:	b2db      	uxtb	r3, r3
 8002120:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002124:	b2da      	uxtb	r2, r3
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	0a1b      	lsrs	r3, r3, #8
 800212e:	b2db      	uxtb	r3, r3
 8002130:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002134:	b2da      	uxtb	r2, r3
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	b2db      	uxtb	r3, r3
 800213e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002142:	b2da      	uxtb	r2, r3
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	0d9b      	lsrs	r3, r3, #22
 800214c:	b2db      	uxtb	r3, r3
 800214e:	f003 0301 	and.w	r3, r3, #1
 8002152:	b2da      	uxtb	r2, r3
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d11a      	bne.n	8002194 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	4618      	mov	r0, r3
 8002164:	f000 f98e 	bl	8002484 <RTC_Bcd2ToByte>
 8002168:	4603      	mov	r3, r0
 800216a:	461a      	mov	r2, r3
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	785b      	ldrb	r3, [r3, #1]
 8002174:	4618      	mov	r0, r3
 8002176:	f000 f985 	bl	8002484 <RTC_Bcd2ToByte>
 800217a:	4603      	mov	r3, r0
 800217c:	461a      	mov	r2, r3
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	789b      	ldrb	r3, [r3, #2]
 8002186:	4618      	mov	r0, r3
 8002188:	f000 f97c 	bl	8002484 <RTC_Bcd2ToByte>
 800218c:	4603      	mov	r3, r0
 800218e:	461a      	mov	r2, r3
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002194:	2300      	movs	r3, #0
}
 8002196:	4618      	mov	r0, r3
 8002198:	3718      	adds	r7, #24
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}

0800219e <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800219e:	b590      	push	{r4, r7, lr}
 80021a0:	b087      	sub	sp, #28
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	60f8      	str	r0, [r7, #12]
 80021a6:	60b9      	str	r1, [r7, #8]
 80021a8:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80021aa:	2300      	movs	r3, #0
 80021ac:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	7f1b      	ldrb	r3, [r3, #28]
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d101      	bne.n	80021ba <HAL_RTC_SetDate+0x1c>
 80021b6:	2302      	movs	r3, #2
 80021b8:	e071      	b.n	800229e <HAL_RTC_SetDate+0x100>
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2201      	movs	r2, #1
 80021be:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2202      	movs	r2, #2
 80021c4:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d10e      	bne.n	80021ea <HAL_RTC_SetDate+0x4c>
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	785b      	ldrb	r3, [r3, #1]
 80021d0:	f003 0310 	and.w	r3, r3, #16
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d008      	beq.n	80021ea <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	785b      	ldrb	r3, [r3, #1]
 80021dc:	f023 0310 	bic.w	r3, r3, #16
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	330a      	adds	r3, #10
 80021e4:	b2da      	uxtb	r2, r3
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d11c      	bne.n	800222a <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	78db      	ldrb	r3, [r3, #3]
 80021f4:	4618      	mov	r0, r3
 80021f6:	f000 f927 	bl	8002448 <RTC_ByteToBcd2>
 80021fa:	4603      	mov	r3, r0
 80021fc:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	785b      	ldrb	r3, [r3, #1]
 8002202:	4618      	mov	r0, r3
 8002204:	f000 f920 	bl	8002448 <RTC_ByteToBcd2>
 8002208:	4603      	mov	r3, r0
 800220a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800220c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	789b      	ldrb	r3, [r3, #2]
 8002212:	4618      	mov	r0, r3
 8002214:	f000 f918 	bl	8002448 <RTC_ByteToBcd2>
 8002218:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800221a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002224:	4313      	orrs	r3, r2
 8002226:	617b      	str	r3, [r7, #20]
 8002228:	e00e      	b.n	8002248 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	78db      	ldrb	r3, [r3, #3]
 800222e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	785b      	ldrb	r3, [r3, #1]
 8002234:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002236:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8002238:	68ba      	ldr	r2, [r7, #8]
 800223a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800223c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002244:	4313      	orrs	r3, r2
 8002246:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	22ca      	movs	r2, #202	@ 0xca
 800224e:	625a      	str	r2, [r3, #36]	@ 0x24
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	2253      	movs	r2, #83	@ 0x53
 8002256:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002258:	68f8      	ldr	r0, [r7, #12]
 800225a:	f000 f899 	bl	8002390 <RTC_EnterInitMode>
 800225e:	4603      	mov	r3, r0
 8002260:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8002262:	7cfb      	ldrb	r3, [r7, #19]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d10c      	bne.n	8002282 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002272:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8002276:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002278:	68f8      	ldr	r0, [r7, #12]
 800227a:	f000 f8c0 	bl	80023fe <RTC_ExitInitMode>
 800227e:	4603      	mov	r3, r0
 8002280:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8002282:	7cfb      	ldrb	r3, [r7, #19]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d102      	bne.n	800228e <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2201      	movs	r2, #1
 800228c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	22ff      	movs	r2, #255	@ 0xff
 8002294:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2200      	movs	r2, #0
 800229a:	771a      	strb	r2, [r3, #28]

  return status;
 800229c:	7cfb      	ldrb	r3, [r7, #19]
}
 800229e:	4618      	mov	r0, r3
 80022a0:	371c      	adds	r7, #28
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd90      	pop	{r4, r7, pc}

080022a6 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80022a6:	b580      	push	{r7, lr}
 80022a8:	b086      	sub	sp, #24
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	60f8      	str	r0, [r7, #12]
 80022ae:	60b9      	str	r1, [r7, #8]
 80022b0:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80022b2:	2300      	movs	r3, #0
 80022b4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80022c0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80022c4:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	0c1b      	lsrs	r3, r3, #16
 80022ca:	b2da      	uxtb	r2, r3
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	0a1b      	lsrs	r3, r3, #8
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	f003 031f 	and.w	r3, r3, #31
 80022da:	b2da      	uxtb	r2, r3
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80022e8:	b2da      	uxtb	r2, r3
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	0b5b      	lsrs	r3, r3, #13
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	f003 0307 	and.w	r3, r3, #7
 80022f8:	b2da      	uxtb	r2, r3
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d11a      	bne.n	800233a <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	78db      	ldrb	r3, [r3, #3]
 8002308:	4618      	mov	r0, r3
 800230a:	f000 f8bb 	bl	8002484 <RTC_Bcd2ToByte>
 800230e:	4603      	mov	r3, r0
 8002310:	461a      	mov	r2, r3
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	785b      	ldrb	r3, [r3, #1]
 800231a:	4618      	mov	r0, r3
 800231c:	f000 f8b2 	bl	8002484 <RTC_Bcd2ToByte>
 8002320:	4603      	mov	r3, r0
 8002322:	461a      	mov	r2, r3
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	789b      	ldrb	r3, [r3, #2]
 800232c:	4618      	mov	r0, r3
 800232e:	f000 f8a9 	bl	8002484 <RTC_Bcd2ToByte>
 8002332:	4603      	mov	r3, r0
 8002334:	461a      	mov	r2, r3
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800233a:	2300      	movs	r3, #0
}
 800233c:	4618      	mov	r0, r3
 800233e:	3718      	adds	r7, #24
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}

08002344 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800234c:	2300      	movs	r3, #0
 800234e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a0d      	ldr	r2, [pc, #52]	@ (800238c <HAL_RTC_WaitForSynchro+0x48>)
 8002356:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002358:	f7fe fcce 	bl	8000cf8 <HAL_GetTick>
 800235c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800235e:	e009      	b.n	8002374 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002360:	f7fe fcca 	bl	8000cf8 <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800236e:	d901      	bls.n	8002374 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8002370:	2303      	movs	r3, #3
 8002372:	e007      	b.n	8002384 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	68db      	ldr	r3, [r3, #12]
 800237a:	f003 0320 	and.w	r3, r3, #32
 800237e:	2b00      	cmp	r3, #0
 8002380:	d0ee      	beq.n	8002360 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8002382:	2300      	movs	r3, #0
}
 8002384:	4618      	mov	r0, r3
 8002386:	3710      	adds	r7, #16
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	00017f5f 	.word	0x00017f5f

08002390 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002398:	2300      	movs	r3, #0
 800239a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800239c:	2300      	movs	r3, #0
 800239e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	68db      	ldr	r3, [r3, #12]
 80023a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d122      	bne.n	80023f4 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	68da      	ldr	r2, [r3, #12]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80023bc:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80023be:	f7fe fc9b 	bl	8000cf8 <HAL_GetTick>
 80023c2:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80023c4:	e00c      	b.n	80023e0 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80023c6:	f7fe fc97 	bl	8000cf8 <HAL_GetTick>
 80023ca:	4602      	mov	r2, r0
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	1ad3      	subs	r3, r2, r3
 80023d0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80023d4:	d904      	bls.n	80023e0 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2204      	movs	r2, #4
 80023da:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d102      	bne.n	80023f4 <RTC_EnterInitMode+0x64>
 80023ee:	7bfb      	ldrb	r3, [r7, #15]
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d1e8      	bne.n	80023c6 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80023f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3710      	adds	r7, #16
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}

080023fe <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80023fe:	b580      	push	{r7, lr}
 8002400:	b084      	sub	sp, #16
 8002402:	af00      	add	r7, sp, #0
 8002404:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002406:	2300      	movs	r3, #0
 8002408:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	68da      	ldr	r2, [r3, #12]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002418:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	f003 0320 	and.w	r3, r3, #32
 8002424:	2b00      	cmp	r3, #0
 8002426:	d10a      	bne.n	800243e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	f7ff ff8b 	bl	8002344 <HAL_RTC_WaitForSynchro>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d004      	beq.n	800243e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2204      	movs	r2, #4
 8002438:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800243e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002440:	4618      	mov	r0, r3
 8002442:	3710      	adds	r7, #16
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}

08002448 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8002448:	b480      	push	{r7}
 800244a:	b085      	sub	sp, #20
 800244c:	af00      	add	r7, sp, #0
 800244e:	4603      	mov	r3, r0
 8002450:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8002452:	2300      	movs	r3, #0
 8002454:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8002456:	e005      	b.n	8002464 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	3301      	adds	r3, #1
 800245c:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800245e:	79fb      	ldrb	r3, [r7, #7]
 8002460:	3b0a      	subs	r3, #10
 8002462:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8002464:	79fb      	ldrb	r3, [r7, #7]
 8002466:	2b09      	cmp	r3, #9
 8002468:	d8f6      	bhi.n	8002458 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	b2db      	uxtb	r3, r3
 800246e:	011b      	lsls	r3, r3, #4
 8002470:	b2da      	uxtb	r2, r3
 8002472:	79fb      	ldrb	r3, [r7, #7]
 8002474:	4313      	orrs	r3, r2
 8002476:	b2db      	uxtb	r3, r3
}
 8002478:	4618      	mov	r0, r3
 800247a:	3714      	adds	r7, #20
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8002484:	b480      	push	{r7}
 8002486:	b085      	sub	sp, #20
 8002488:	af00      	add	r7, sp, #0
 800248a:	4603      	mov	r3, r0
 800248c:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 800248e:	2300      	movs	r3, #0
 8002490:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8002492:	79fb      	ldrb	r3, [r7, #7]
 8002494:	091b      	lsrs	r3, r3, #4
 8002496:	b2db      	uxtb	r3, r3
 8002498:	461a      	mov	r2, r3
 800249a:	4613      	mov	r3, r2
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	4413      	add	r3, r2
 80024a0:	005b      	lsls	r3, r3, #1
 80024a2:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	b2da      	uxtb	r2, r3
 80024a8:	79fb      	ldrb	r3, [r7, #7]
 80024aa:	f003 030f 	and.w	r3, r3, #15
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	4413      	add	r3, r2
 80024b2:	b2db      	uxtb	r3, r3
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3714      	adds	r7, #20
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr

080024c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d101      	bne.n	80024d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e042      	b.n	8002558 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d106      	bne.n	80024ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2200      	movs	r2, #0
 80024e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f7fe faa4 	bl	8000a34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2224      	movs	r2, #36	@ 0x24
 80024f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	68da      	ldr	r2, [r3, #12]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002502:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	f000 f973 	bl	80027f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	691a      	ldr	r2, [r3, #16]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002518:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	695a      	ldr	r2, [r3, #20]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002528:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	68da      	ldr	r2, [r3, #12]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002538:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2200      	movs	r2, #0
 800253e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2220      	movs	r2, #32
 8002544:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2220      	movs	r2, #32
 800254c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2200      	movs	r2, #0
 8002554:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002556:	2300      	movs	r3, #0
}
 8002558:	4618      	mov	r0, r3
 800255a:	3708      	adds	r7, #8
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}

08002560 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b08a      	sub	sp, #40	@ 0x28
 8002564:	af02      	add	r7, sp, #8
 8002566:	60f8      	str	r0, [r7, #12]
 8002568:	60b9      	str	r1, [r7, #8]
 800256a:	603b      	str	r3, [r7, #0]
 800256c:	4613      	mov	r3, r2
 800256e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002570:	2300      	movs	r3, #0
 8002572:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800257a:	b2db      	uxtb	r3, r3
 800257c:	2b20      	cmp	r3, #32
 800257e:	d175      	bne.n	800266c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d002      	beq.n	800258c <HAL_UART_Transmit+0x2c>
 8002586:	88fb      	ldrh	r3, [r7, #6]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d101      	bne.n	8002590 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e06e      	b.n	800266e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2200      	movs	r2, #0
 8002594:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2221      	movs	r2, #33	@ 0x21
 800259a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800259e:	f7fe fbab 	bl	8000cf8 <HAL_GetTick>
 80025a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	88fa      	ldrh	r2, [r7, #6]
 80025a8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	88fa      	ldrh	r2, [r7, #6]
 80025ae:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80025b8:	d108      	bne.n	80025cc <HAL_UART_Transmit+0x6c>
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	691b      	ldr	r3, [r3, #16]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d104      	bne.n	80025cc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80025c2:	2300      	movs	r3, #0
 80025c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	61bb      	str	r3, [r7, #24]
 80025ca:	e003      	b.n	80025d4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80025d0:	2300      	movs	r3, #0
 80025d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80025d4:	e02e      	b.n	8002634 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	9300      	str	r3, [sp, #0]
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	2200      	movs	r2, #0
 80025de:	2180      	movs	r1, #128	@ 0x80
 80025e0:	68f8      	ldr	r0, [r7, #12]
 80025e2:	f000 f848 	bl	8002676 <UART_WaitOnFlagUntilTimeout>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d005      	beq.n	80025f8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2220      	movs	r2, #32
 80025f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80025f4:	2303      	movs	r3, #3
 80025f6:	e03a      	b.n	800266e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d10b      	bne.n	8002616 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80025fe:	69bb      	ldr	r3, [r7, #24]
 8002600:	881b      	ldrh	r3, [r3, #0]
 8002602:	461a      	mov	r2, r3
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800260c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800260e:	69bb      	ldr	r3, [r7, #24]
 8002610:	3302      	adds	r3, #2
 8002612:	61bb      	str	r3, [r7, #24]
 8002614:	e007      	b.n	8002626 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	781a      	ldrb	r2, [r3, #0]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	3301      	adds	r3, #1
 8002624:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800262a:	b29b      	uxth	r3, r3
 800262c:	3b01      	subs	r3, #1
 800262e:	b29a      	uxth	r2, r3
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002638:	b29b      	uxth	r3, r3
 800263a:	2b00      	cmp	r3, #0
 800263c:	d1cb      	bne.n	80025d6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	9300      	str	r3, [sp, #0]
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	2200      	movs	r2, #0
 8002646:	2140      	movs	r1, #64	@ 0x40
 8002648:	68f8      	ldr	r0, [r7, #12]
 800264a:	f000 f814 	bl	8002676 <UART_WaitOnFlagUntilTimeout>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d005      	beq.n	8002660 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2220      	movs	r2, #32
 8002658:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	e006      	b.n	800266e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2220      	movs	r2, #32
 8002664:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002668:	2300      	movs	r3, #0
 800266a:	e000      	b.n	800266e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800266c:	2302      	movs	r3, #2
  }
}
 800266e:	4618      	mov	r0, r3
 8002670:	3720      	adds	r7, #32
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002676:	b580      	push	{r7, lr}
 8002678:	b086      	sub	sp, #24
 800267a:	af00      	add	r7, sp, #0
 800267c:	60f8      	str	r0, [r7, #12]
 800267e:	60b9      	str	r1, [r7, #8]
 8002680:	603b      	str	r3, [r7, #0]
 8002682:	4613      	mov	r3, r2
 8002684:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002686:	e03b      	b.n	8002700 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002688:	6a3b      	ldr	r3, [r7, #32]
 800268a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800268e:	d037      	beq.n	8002700 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002690:	f7fe fb32 	bl	8000cf8 <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	6a3a      	ldr	r2, [r7, #32]
 800269c:	429a      	cmp	r2, r3
 800269e:	d302      	bcc.n	80026a6 <UART_WaitOnFlagUntilTimeout+0x30>
 80026a0:	6a3b      	ldr	r3, [r7, #32]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d101      	bne.n	80026aa <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e03a      	b.n	8002720 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	f003 0304 	and.w	r3, r3, #4
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d023      	beq.n	8002700 <UART_WaitOnFlagUntilTimeout+0x8a>
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	2b80      	cmp	r3, #128	@ 0x80
 80026bc:	d020      	beq.n	8002700 <UART_WaitOnFlagUntilTimeout+0x8a>
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	2b40      	cmp	r3, #64	@ 0x40
 80026c2:	d01d      	beq.n	8002700 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0308 	and.w	r3, r3, #8
 80026ce:	2b08      	cmp	r3, #8
 80026d0:	d116      	bne.n	8002700 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80026d2:	2300      	movs	r3, #0
 80026d4:	617b      	str	r3, [r7, #20]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	617b      	str	r3, [r7, #20]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	617b      	str	r3, [r7, #20]
 80026e6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80026e8:	68f8      	ldr	r0, [r7, #12]
 80026ea:	f000 f81d 	bl	8002728 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2208      	movs	r2, #8
 80026f2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e00f      	b.n	8002720 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	4013      	ands	r3, r2
 800270a:	68ba      	ldr	r2, [r7, #8]
 800270c:	429a      	cmp	r2, r3
 800270e:	bf0c      	ite	eq
 8002710:	2301      	moveq	r3, #1
 8002712:	2300      	movne	r3, #0
 8002714:	b2db      	uxtb	r3, r3
 8002716:	461a      	mov	r2, r3
 8002718:	79fb      	ldrb	r3, [r7, #7]
 800271a:	429a      	cmp	r2, r3
 800271c:	d0b4      	beq.n	8002688 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800271e:	2300      	movs	r3, #0
}
 8002720:	4618      	mov	r0, r3
 8002722:	3718      	adds	r7, #24
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}

08002728 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002728:	b480      	push	{r7}
 800272a:	b095      	sub	sp, #84	@ 0x54
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	330c      	adds	r3, #12
 8002736:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002738:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800273a:	e853 3f00 	ldrex	r3, [r3]
 800273e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002740:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002742:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002746:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	330c      	adds	r3, #12
 800274e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002750:	643a      	str	r2, [r7, #64]	@ 0x40
 8002752:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002754:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002756:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002758:	e841 2300 	strex	r3, r2, [r1]
 800275c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800275e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002760:	2b00      	cmp	r3, #0
 8002762:	d1e5      	bne.n	8002730 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	3314      	adds	r3, #20
 800276a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800276c:	6a3b      	ldr	r3, [r7, #32]
 800276e:	e853 3f00 	ldrex	r3, [r3]
 8002772:	61fb      	str	r3, [r7, #28]
   return(result);
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	f023 0301 	bic.w	r3, r3, #1
 800277a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	3314      	adds	r3, #20
 8002782:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002784:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002786:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002788:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800278a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800278c:	e841 2300 	strex	r3, r2, [r1]
 8002790:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002794:	2b00      	cmp	r3, #0
 8002796:	d1e5      	bne.n	8002764 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800279c:	2b01      	cmp	r3, #1
 800279e:	d119      	bne.n	80027d4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	330c      	adds	r3, #12
 80027a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	e853 3f00 	ldrex	r3, [r3]
 80027ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	f023 0310 	bic.w	r3, r3, #16
 80027b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	330c      	adds	r3, #12
 80027be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80027c0:	61ba      	str	r2, [r7, #24]
 80027c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027c4:	6979      	ldr	r1, [r7, #20]
 80027c6:	69ba      	ldr	r2, [r7, #24]
 80027c8:	e841 2300 	strex	r3, r2, [r1]
 80027cc:	613b      	str	r3, [r7, #16]
   return(result);
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d1e5      	bne.n	80027a0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2220      	movs	r2, #32
 80027d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80027e2:	bf00      	nop
 80027e4:	3754      	adds	r7, #84	@ 0x54
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr
	...

080027f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80027f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027f4:	b0c0      	sub	sp, #256	@ 0x100
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	691b      	ldr	r3, [r3, #16]
 8002804:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800280c:	68d9      	ldr	r1, [r3, #12]
 800280e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	ea40 0301 	orr.w	r3, r0, r1
 8002818:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800281a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800281e:	689a      	ldr	r2, [r3, #8]
 8002820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002824:	691b      	ldr	r3, [r3, #16]
 8002826:	431a      	orrs	r2, r3
 8002828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800282c:	695b      	ldr	r3, [r3, #20]
 800282e:	431a      	orrs	r2, r3
 8002830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002834:	69db      	ldr	r3, [r3, #28]
 8002836:	4313      	orrs	r3, r2
 8002838:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800283c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002848:	f021 010c 	bic.w	r1, r1, #12
 800284c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002856:	430b      	orrs	r3, r1
 8002858:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800285a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	695b      	ldr	r3, [r3, #20]
 8002862:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002866:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800286a:	6999      	ldr	r1, [r3, #24]
 800286c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	ea40 0301 	orr.w	r3, r0, r1
 8002876:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	4b8f      	ldr	r3, [pc, #572]	@ (8002abc <UART_SetConfig+0x2cc>)
 8002880:	429a      	cmp	r2, r3
 8002882:	d005      	beq.n	8002890 <UART_SetConfig+0xa0>
 8002884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	4b8d      	ldr	r3, [pc, #564]	@ (8002ac0 <UART_SetConfig+0x2d0>)
 800288c:	429a      	cmp	r2, r3
 800288e:	d104      	bne.n	800289a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002890:	f7ff fa14 	bl	8001cbc <HAL_RCC_GetPCLK2Freq>
 8002894:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002898:	e003      	b.n	80028a2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800289a:	f7ff f9fb 	bl	8001c94 <HAL_RCC_GetPCLK1Freq>
 800289e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80028a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028a6:	69db      	ldr	r3, [r3, #28]
 80028a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80028ac:	f040 810c 	bne.w	8002ac8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80028b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80028b4:	2200      	movs	r2, #0
 80028b6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80028ba:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80028be:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80028c2:	4622      	mov	r2, r4
 80028c4:	462b      	mov	r3, r5
 80028c6:	1891      	adds	r1, r2, r2
 80028c8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80028ca:	415b      	adcs	r3, r3
 80028cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80028ce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80028d2:	4621      	mov	r1, r4
 80028d4:	eb12 0801 	adds.w	r8, r2, r1
 80028d8:	4629      	mov	r1, r5
 80028da:	eb43 0901 	adc.w	r9, r3, r1
 80028de:	f04f 0200 	mov.w	r2, #0
 80028e2:	f04f 0300 	mov.w	r3, #0
 80028e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80028ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80028ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80028f2:	4690      	mov	r8, r2
 80028f4:	4699      	mov	r9, r3
 80028f6:	4623      	mov	r3, r4
 80028f8:	eb18 0303 	adds.w	r3, r8, r3
 80028fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002900:	462b      	mov	r3, r5
 8002902:	eb49 0303 	adc.w	r3, r9, r3
 8002906:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800290a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002916:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800291a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800291e:	460b      	mov	r3, r1
 8002920:	18db      	adds	r3, r3, r3
 8002922:	653b      	str	r3, [r7, #80]	@ 0x50
 8002924:	4613      	mov	r3, r2
 8002926:	eb42 0303 	adc.w	r3, r2, r3
 800292a:	657b      	str	r3, [r7, #84]	@ 0x54
 800292c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002930:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002934:	f7fd fca4 	bl	8000280 <__aeabi_uldivmod>
 8002938:	4602      	mov	r2, r0
 800293a:	460b      	mov	r3, r1
 800293c:	4b61      	ldr	r3, [pc, #388]	@ (8002ac4 <UART_SetConfig+0x2d4>)
 800293e:	fba3 2302 	umull	r2, r3, r3, r2
 8002942:	095b      	lsrs	r3, r3, #5
 8002944:	011c      	lsls	r4, r3, #4
 8002946:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800294a:	2200      	movs	r2, #0
 800294c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002950:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002954:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002958:	4642      	mov	r2, r8
 800295a:	464b      	mov	r3, r9
 800295c:	1891      	adds	r1, r2, r2
 800295e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002960:	415b      	adcs	r3, r3
 8002962:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002964:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002968:	4641      	mov	r1, r8
 800296a:	eb12 0a01 	adds.w	sl, r2, r1
 800296e:	4649      	mov	r1, r9
 8002970:	eb43 0b01 	adc.w	fp, r3, r1
 8002974:	f04f 0200 	mov.w	r2, #0
 8002978:	f04f 0300 	mov.w	r3, #0
 800297c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002980:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002984:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002988:	4692      	mov	sl, r2
 800298a:	469b      	mov	fp, r3
 800298c:	4643      	mov	r3, r8
 800298e:	eb1a 0303 	adds.w	r3, sl, r3
 8002992:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002996:	464b      	mov	r3, r9
 8002998:	eb4b 0303 	adc.w	r3, fp, r3
 800299c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80029a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80029ac:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80029b0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80029b4:	460b      	mov	r3, r1
 80029b6:	18db      	adds	r3, r3, r3
 80029b8:	643b      	str	r3, [r7, #64]	@ 0x40
 80029ba:	4613      	mov	r3, r2
 80029bc:	eb42 0303 	adc.w	r3, r2, r3
 80029c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80029c2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80029c6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80029ca:	f7fd fc59 	bl	8000280 <__aeabi_uldivmod>
 80029ce:	4602      	mov	r2, r0
 80029d0:	460b      	mov	r3, r1
 80029d2:	4611      	mov	r1, r2
 80029d4:	4b3b      	ldr	r3, [pc, #236]	@ (8002ac4 <UART_SetConfig+0x2d4>)
 80029d6:	fba3 2301 	umull	r2, r3, r3, r1
 80029da:	095b      	lsrs	r3, r3, #5
 80029dc:	2264      	movs	r2, #100	@ 0x64
 80029de:	fb02 f303 	mul.w	r3, r2, r3
 80029e2:	1acb      	subs	r3, r1, r3
 80029e4:	00db      	lsls	r3, r3, #3
 80029e6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80029ea:	4b36      	ldr	r3, [pc, #216]	@ (8002ac4 <UART_SetConfig+0x2d4>)
 80029ec:	fba3 2302 	umull	r2, r3, r3, r2
 80029f0:	095b      	lsrs	r3, r3, #5
 80029f2:	005b      	lsls	r3, r3, #1
 80029f4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80029f8:	441c      	add	r4, r3
 80029fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80029fe:	2200      	movs	r2, #0
 8002a00:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002a04:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002a08:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002a0c:	4642      	mov	r2, r8
 8002a0e:	464b      	mov	r3, r9
 8002a10:	1891      	adds	r1, r2, r2
 8002a12:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002a14:	415b      	adcs	r3, r3
 8002a16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a18:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002a1c:	4641      	mov	r1, r8
 8002a1e:	1851      	adds	r1, r2, r1
 8002a20:	6339      	str	r1, [r7, #48]	@ 0x30
 8002a22:	4649      	mov	r1, r9
 8002a24:	414b      	adcs	r3, r1
 8002a26:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a28:	f04f 0200 	mov.w	r2, #0
 8002a2c:	f04f 0300 	mov.w	r3, #0
 8002a30:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002a34:	4659      	mov	r1, fp
 8002a36:	00cb      	lsls	r3, r1, #3
 8002a38:	4651      	mov	r1, sl
 8002a3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a3e:	4651      	mov	r1, sl
 8002a40:	00ca      	lsls	r2, r1, #3
 8002a42:	4610      	mov	r0, r2
 8002a44:	4619      	mov	r1, r3
 8002a46:	4603      	mov	r3, r0
 8002a48:	4642      	mov	r2, r8
 8002a4a:	189b      	adds	r3, r3, r2
 8002a4c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002a50:	464b      	mov	r3, r9
 8002a52:	460a      	mov	r2, r1
 8002a54:	eb42 0303 	adc.w	r3, r2, r3
 8002a58:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002a5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	2200      	movs	r2, #0
 8002a64:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002a68:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002a6c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002a70:	460b      	mov	r3, r1
 8002a72:	18db      	adds	r3, r3, r3
 8002a74:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002a76:	4613      	mov	r3, r2
 8002a78:	eb42 0303 	adc.w	r3, r2, r3
 8002a7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a7e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002a82:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002a86:	f7fd fbfb 	bl	8000280 <__aeabi_uldivmod>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	460b      	mov	r3, r1
 8002a8e:	4b0d      	ldr	r3, [pc, #52]	@ (8002ac4 <UART_SetConfig+0x2d4>)
 8002a90:	fba3 1302 	umull	r1, r3, r3, r2
 8002a94:	095b      	lsrs	r3, r3, #5
 8002a96:	2164      	movs	r1, #100	@ 0x64
 8002a98:	fb01 f303 	mul.w	r3, r1, r3
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	00db      	lsls	r3, r3, #3
 8002aa0:	3332      	adds	r3, #50	@ 0x32
 8002aa2:	4a08      	ldr	r2, [pc, #32]	@ (8002ac4 <UART_SetConfig+0x2d4>)
 8002aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8002aa8:	095b      	lsrs	r3, r3, #5
 8002aaa:	f003 0207 	and.w	r2, r3, #7
 8002aae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4422      	add	r2, r4
 8002ab6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002ab8:	e106      	b.n	8002cc8 <UART_SetConfig+0x4d8>
 8002aba:	bf00      	nop
 8002abc:	40011000 	.word	0x40011000
 8002ac0:	40011400 	.word	0x40011400
 8002ac4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ac8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002acc:	2200      	movs	r2, #0
 8002ace:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002ad2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002ad6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002ada:	4642      	mov	r2, r8
 8002adc:	464b      	mov	r3, r9
 8002ade:	1891      	adds	r1, r2, r2
 8002ae0:	6239      	str	r1, [r7, #32]
 8002ae2:	415b      	adcs	r3, r3
 8002ae4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ae6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002aea:	4641      	mov	r1, r8
 8002aec:	1854      	adds	r4, r2, r1
 8002aee:	4649      	mov	r1, r9
 8002af0:	eb43 0501 	adc.w	r5, r3, r1
 8002af4:	f04f 0200 	mov.w	r2, #0
 8002af8:	f04f 0300 	mov.w	r3, #0
 8002afc:	00eb      	lsls	r3, r5, #3
 8002afe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b02:	00e2      	lsls	r2, r4, #3
 8002b04:	4614      	mov	r4, r2
 8002b06:	461d      	mov	r5, r3
 8002b08:	4643      	mov	r3, r8
 8002b0a:	18e3      	adds	r3, r4, r3
 8002b0c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002b10:	464b      	mov	r3, r9
 8002b12:	eb45 0303 	adc.w	r3, r5, r3
 8002b16:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002b1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002b26:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002b2a:	f04f 0200 	mov.w	r2, #0
 8002b2e:	f04f 0300 	mov.w	r3, #0
 8002b32:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002b36:	4629      	mov	r1, r5
 8002b38:	008b      	lsls	r3, r1, #2
 8002b3a:	4621      	mov	r1, r4
 8002b3c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b40:	4621      	mov	r1, r4
 8002b42:	008a      	lsls	r2, r1, #2
 8002b44:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002b48:	f7fd fb9a 	bl	8000280 <__aeabi_uldivmod>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	460b      	mov	r3, r1
 8002b50:	4b60      	ldr	r3, [pc, #384]	@ (8002cd4 <UART_SetConfig+0x4e4>)
 8002b52:	fba3 2302 	umull	r2, r3, r3, r2
 8002b56:	095b      	lsrs	r3, r3, #5
 8002b58:	011c      	lsls	r4, r3, #4
 8002b5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002b64:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002b68:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002b6c:	4642      	mov	r2, r8
 8002b6e:	464b      	mov	r3, r9
 8002b70:	1891      	adds	r1, r2, r2
 8002b72:	61b9      	str	r1, [r7, #24]
 8002b74:	415b      	adcs	r3, r3
 8002b76:	61fb      	str	r3, [r7, #28]
 8002b78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b7c:	4641      	mov	r1, r8
 8002b7e:	1851      	adds	r1, r2, r1
 8002b80:	6139      	str	r1, [r7, #16]
 8002b82:	4649      	mov	r1, r9
 8002b84:	414b      	adcs	r3, r1
 8002b86:	617b      	str	r3, [r7, #20]
 8002b88:	f04f 0200 	mov.w	r2, #0
 8002b8c:	f04f 0300 	mov.w	r3, #0
 8002b90:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b94:	4659      	mov	r1, fp
 8002b96:	00cb      	lsls	r3, r1, #3
 8002b98:	4651      	mov	r1, sl
 8002b9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b9e:	4651      	mov	r1, sl
 8002ba0:	00ca      	lsls	r2, r1, #3
 8002ba2:	4610      	mov	r0, r2
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	4642      	mov	r2, r8
 8002baa:	189b      	adds	r3, r3, r2
 8002bac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002bb0:	464b      	mov	r3, r9
 8002bb2:	460a      	mov	r2, r1
 8002bb4:	eb42 0303 	adc.w	r3, r2, r3
 8002bb8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002bc6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002bc8:	f04f 0200 	mov.w	r2, #0
 8002bcc:	f04f 0300 	mov.w	r3, #0
 8002bd0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002bd4:	4649      	mov	r1, r9
 8002bd6:	008b      	lsls	r3, r1, #2
 8002bd8:	4641      	mov	r1, r8
 8002bda:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002bde:	4641      	mov	r1, r8
 8002be0:	008a      	lsls	r2, r1, #2
 8002be2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002be6:	f7fd fb4b 	bl	8000280 <__aeabi_uldivmod>
 8002bea:	4602      	mov	r2, r0
 8002bec:	460b      	mov	r3, r1
 8002bee:	4611      	mov	r1, r2
 8002bf0:	4b38      	ldr	r3, [pc, #224]	@ (8002cd4 <UART_SetConfig+0x4e4>)
 8002bf2:	fba3 2301 	umull	r2, r3, r3, r1
 8002bf6:	095b      	lsrs	r3, r3, #5
 8002bf8:	2264      	movs	r2, #100	@ 0x64
 8002bfa:	fb02 f303 	mul.w	r3, r2, r3
 8002bfe:	1acb      	subs	r3, r1, r3
 8002c00:	011b      	lsls	r3, r3, #4
 8002c02:	3332      	adds	r3, #50	@ 0x32
 8002c04:	4a33      	ldr	r2, [pc, #204]	@ (8002cd4 <UART_SetConfig+0x4e4>)
 8002c06:	fba2 2303 	umull	r2, r3, r2, r3
 8002c0a:	095b      	lsrs	r3, r3, #5
 8002c0c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c10:	441c      	add	r4, r3
 8002c12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c16:	2200      	movs	r2, #0
 8002c18:	673b      	str	r3, [r7, #112]	@ 0x70
 8002c1a:	677a      	str	r2, [r7, #116]	@ 0x74
 8002c1c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002c20:	4642      	mov	r2, r8
 8002c22:	464b      	mov	r3, r9
 8002c24:	1891      	adds	r1, r2, r2
 8002c26:	60b9      	str	r1, [r7, #8]
 8002c28:	415b      	adcs	r3, r3
 8002c2a:	60fb      	str	r3, [r7, #12]
 8002c2c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c30:	4641      	mov	r1, r8
 8002c32:	1851      	adds	r1, r2, r1
 8002c34:	6039      	str	r1, [r7, #0]
 8002c36:	4649      	mov	r1, r9
 8002c38:	414b      	adcs	r3, r1
 8002c3a:	607b      	str	r3, [r7, #4]
 8002c3c:	f04f 0200 	mov.w	r2, #0
 8002c40:	f04f 0300 	mov.w	r3, #0
 8002c44:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002c48:	4659      	mov	r1, fp
 8002c4a:	00cb      	lsls	r3, r1, #3
 8002c4c:	4651      	mov	r1, sl
 8002c4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c52:	4651      	mov	r1, sl
 8002c54:	00ca      	lsls	r2, r1, #3
 8002c56:	4610      	mov	r0, r2
 8002c58:	4619      	mov	r1, r3
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	4642      	mov	r2, r8
 8002c5e:	189b      	adds	r3, r3, r2
 8002c60:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002c62:	464b      	mov	r3, r9
 8002c64:	460a      	mov	r2, r1
 8002c66:	eb42 0303 	adc.w	r3, r2, r3
 8002c6a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	2200      	movs	r2, #0
 8002c74:	663b      	str	r3, [r7, #96]	@ 0x60
 8002c76:	667a      	str	r2, [r7, #100]	@ 0x64
 8002c78:	f04f 0200 	mov.w	r2, #0
 8002c7c:	f04f 0300 	mov.w	r3, #0
 8002c80:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002c84:	4649      	mov	r1, r9
 8002c86:	008b      	lsls	r3, r1, #2
 8002c88:	4641      	mov	r1, r8
 8002c8a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c8e:	4641      	mov	r1, r8
 8002c90:	008a      	lsls	r2, r1, #2
 8002c92:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002c96:	f7fd faf3 	bl	8000280 <__aeabi_uldivmod>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	460b      	mov	r3, r1
 8002c9e:	4b0d      	ldr	r3, [pc, #52]	@ (8002cd4 <UART_SetConfig+0x4e4>)
 8002ca0:	fba3 1302 	umull	r1, r3, r3, r2
 8002ca4:	095b      	lsrs	r3, r3, #5
 8002ca6:	2164      	movs	r1, #100	@ 0x64
 8002ca8:	fb01 f303 	mul.w	r3, r1, r3
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	011b      	lsls	r3, r3, #4
 8002cb0:	3332      	adds	r3, #50	@ 0x32
 8002cb2:	4a08      	ldr	r2, [pc, #32]	@ (8002cd4 <UART_SetConfig+0x4e4>)
 8002cb4:	fba2 2303 	umull	r2, r3, r2, r3
 8002cb8:	095b      	lsrs	r3, r3, #5
 8002cba:	f003 020f 	and.w	r2, r3, #15
 8002cbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4422      	add	r2, r4
 8002cc6:	609a      	str	r2, [r3, #8]
}
 8002cc8:	bf00      	nop
 8002cca:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002cd4:	51eb851f 	.word	0x51eb851f

08002cd8 <_vsiprintf_r>:
 8002cd8:	b500      	push	{lr}
 8002cda:	b09b      	sub	sp, #108	@ 0x6c
 8002cdc:	9100      	str	r1, [sp, #0]
 8002cde:	9104      	str	r1, [sp, #16]
 8002ce0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002ce4:	9105      	str	r1, [sp, #20]
 8002ce6:	9102      	str	r1, [sp, #8]
 8002ce8:	4905      	ldr	r1, [pc, #20]	@ (8002d00 <_vsiprintf_r+0x28>)
 8002cea:	9103      	str	r1, [sp, #12]
 8002cec:	4669      	mov	r1, sp
 8002cee:	f000 f99b 	bl	8003028 <_svfiprintf_r>
 8002cf2:	9b00      	ldr	r3, [sp, #0]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	701a      	strb	r2, [r3, #0]
 8002cf8:	b01b      	add	sp, #108	@ 0x6c
 8002cfa:	f85d fb04 	ldr.w	pc, [sp], #4
 8002cfe:	bf00      	nop
 8002d00:	ffff0208 	.word	0xffff0208

08002d04 <vsiprintf>:
 8002d04:	4613      	mov	r3, r2
 8002d06:	460a      	mov	r2, r1
 8002d08:	4601      	mov	r1, r0
 8002d0a:	4802      	ldr	r0, [pc, #8]	@ (8002d14 <vsiprintf+0x10>)
 8002d0c:	6800      	ldr	r0, [r0, #0]
 8002d0e:	f7ff bfe3 	b.w	8002cd8 <_vsiprintf_r>
 8002d12:	bf00      	nop
 8002d14:	2000000c 	.word	0x2000000c

08002d18 <memset>:
 8002d18:	4402      	add	r2, r0
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d100      	bne.n	8002d22 <memset+0xa>
 8002d20:	4770      	bx	lr
 8002d22:	f803 1b01 	strb.w	r1, [r3], #1
 8002d26:	e7f9      	b.n	8002d1c <memset+0x4>

08002d28 <__errno>:
 8002d28:	4b01      	ldr	r3, [pc, #4]	@ (8002d30 <__errno+0x8>)
 8002d2a:	6818      	ldr	r0, [r3, #0]
 8002d2c:	4770      	bx	lr
 8002d2e:	bf00      	nop
 8002d30:	2000000c 	.word	0x2000000c

08002d34 <__libc_init_array>:
 8002d34:	b570      	push	{r4, r5, r6, lr}
 8002d36:	4d0d      	ldr	r5, [pc, #52]	@ (8002d6c <__libc_init_array+0x38>)
 8002d38:	4c0d      	ldr	r4, [pc, #52]	@ (8002d70 <__libc_init_array+0x3c>)
 8002d3a:	1b64      	subs	r4, r4, r5
 8002d3c:	10a4      	asrs	r4, r4, #2
 8002d3e:	2600      	movs	r6, #0
 8002d40:	42a6      	cmp	r6, r4
 8002d42:	d109      	bne.n	8002d58 <__libc_init_array+0x24>
 8002d44:	4d0b      	ldr	r5, [pc, #44]	@ (8002d74 <__libc_init_array+0x40>)
 8002d46:	4c0c      	ldr	r4, [pc, #48]	@ (8002d78 <__libc_init_array+0x44>)
 8002d48:	f000 fc66 	bl	8003618 <_init>
 8002d4c:	1b64      	subs	r4, r4, r5
 8002d4e:	10a4      	asrs	r4, r4, #2
 8002d50:	2600      	movs	r6, #0
 8002d52:	42a6      	cmp	r6, r4
 8002d54:	d105      	bne.n	8002d62 <__libc_init_array+0x2e>
 8002d56:	bd70      	pop	{r4, r5, r6, pc}
 8002d58:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d5c:	4798      	blx	r3
 8002d5e:	3601      	adds	r6, #1
 8002d60:	e7ee      	b.n	8002d40 <__libc_init_array+0xc>
 8002d62:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d66:	4798      	blx	r3
 8002d68:	3601      	adds	r6, #1
 8002d6a:	e7f2      	b.n	8002d52 <__libc_init_array+0x1e>
 8002d6c:	08003794 	.word	0x08003794
 8002d70:	08003794 	.word	0x08003794
 8002d74:	08003794 	.word	0x08003794
 8002d78:	08003798 	.word	0x08003798

08002d7c <__retarget_lock_acquire_recursive>:
 8002d7c:	4770      	bx	lr

08002d7e <__retarget_lock_release_recursive>:
 8002d7e:	4770      	bx	lr

08002d80 <_free_r>:
 8002d80:	b538      	push	{r3, r4, r5, lr}
 8002d82:	4605      	mov	r5, r0
 8002d84:	2900      	cmp	r1, #0
 8002d86:	d041      	beq.n	8002e0c <_free_r+0x8c>
 8002d88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002d8c:	1f0c      	subs	r4, r1, #4
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	bfb8      	it	lt
 8002d92:	18e4      	addlt	r4, r4, r3
 8002d94:	f000 f8e0 	bl	8002f58 <__malloc_lock>
 8002d98:	4a1d      	ldr	r2, [pc, #116]	@ (8002e10 <_free_r+0x90>)
 8002d9a:	6813      	ldr	r3, [r2, #0]
 8002d9c:	b933      	cbnz	r3, 8002dac <_free_r+0x2c>
 8002d9e:	6063      	str	r3, [r4, #4]
 8002da0:	6014      	str	r4, [r2, #0]
 8002da2:	4628      	mov	r0, r5
 8002da4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002da8:	f000 b8dc 	b.w	8002f64 <__malloc_unlock>
 8002dac:	42a3      	cmp	r3, r4
 8002dae:	d908      	bls.n	8002dc2 <_free_r+0x42>
 8002db0:	6820      	ldr	r0, [r4, #0]
 8002db2:	1821      	adds	r1, r4, r0
 8002db4:	428b      	cmp	r3, r1
 8002db6:	bf01      	itttt	eq
 8002db8:	6819      	ldreq	r1, [r3, #0]
 8002dba:	685b      	ldreq	r3, [r3, #4]
 8002dbc:	1809      	addeq	r1, r1, r0
 8002dbe:	6021      	streq	r1, [r4, #0]
 8002dc0:	e7ed      	b.n	8002d9e <_free_r+0x1e>
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	b10b      	cbz	r3, 8002dcc <_free_r+0x4c>
 8002dc8:	42a3      	cmp	r3, r4
 8002dca:	d9fa      	bls.n	8002dc2 <_free_r+0x42>
 8002dcc:	6811      	ldr	r1, [r2, #0]
 8002dce:	1850      	adds	r0, r2, r1
 8002dd0:	42a0      	cmp	r0, r4
 8002dd2:	d10b      	bne.n	8002dec <_free_r+0x6c>
 8002dd4:	6820      	ldr	r0, [r4, #0]
 8002dd6:	4401      	add	r1, r0
 8002dd8:	1850      	adds	r0, r2, r1
 8002dda:	4283      	cmp	r3, r0
 8002ddc:	6011      	str	r1, [r2, #0]
 8002dde:	d1e0      	bne.n	8002da2 <_free_r+0x22>
 8002de0:	6818      	ldr	r0, [r3, #0]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	6053      	str	r3, [r2, #4]
 8002de6:	4408      	add	r0, r1
 8002de8:	6010      	str	r0, [r2, #0]
 8002dea:	e7da      	b.n	8002da2 <_free_r+0x22>
 8002dec:	d902      	bls.n	8002df4 <_free_r+0x74>
 8002dee:	230c      	movs	r3, #12
 8002df0:	602b      	str	r3, [r5, #0]
 8002df2:	e7d6      	b.n	8002da2 <_free_r+0x22>
 8002df4:	6820      	ldr	r0, [r4, #0]
 8002df6:	1821      	adds	r1, r4, r0
 8002df8:	428b      	cmp	r3, r1
 8002dfa:	bf04      	itt	eq
 8002dfc:	6819      	ldreq	r1, [r3, #0]
 8002dfe:	685b      	ldreq	r3, [r3, #4]
 8002e00:	6063      	str	r3, [r4, #4]
 8002e02:	bf04      	itt	eq
 8002e04:	1809      	addeq	r1, r1, r0
 8002e06:	6021      	streq	r1, [r4, #0]
 8002e08:	6054      	str	r4, [r2, #4]
 8002e0a:	e7ca      	b.n	8002da2 <_free_r+0x22>
 8002e0c:	bd38      	pop	{r3, r4, r5, pc}
 8002e0e:	bf00      	nop
 8002e10:	2000022c 	.word	0x2000022c

08002e14 <sbrk_aligned>:
 8002e14:	b570      	push	{r4, r5, r6, lr}
 8002e16:	4e0f      	ldr	r6, [pc, #60]	@ (8002e54 <sbrk_aligned+0x40>)
 8002e18:	460c      	mov	r4, r1
 8002e1a:	6831      	ldr	r1, [r6, #0]
 8002e1c:	4605      	mov	r5, r0
 8002e1e:	b911      	cbnz	r1, 8002e26 <sbrk_aligned+0x12>
 8002e20:	f000 fba6 	bl	8003570 <_sbrk_r>
 8002e24:	6030      	str	r0, [r6, #0]
 8002e26:	4621      	mov	r1, r4
 8002e28:	4628      	mov	r0, r5
 8002e2a:	f000 fba1 	bl	8003570 <_sbrk_r>
 8002e2e:	1c43      	adds	r3, r0, #1
 8002e30:	d103      	bne.n	8002e3a <sbrk_aligned+0x26>
 8002e32:	f04f 34ff 	mov.w	r4, #4294967295
 8002e36:	4620      	mov	r0, r4
 8002e38:	bd70      	pop	{r4, r5, r6, pc}
 8002e3a:	1cc4      	adds	r4, r0, #3
 8002e3c:	f024 0403 	bic.w	r4, r4, #3
 8002e40:	42a0      	cmp	r0, r4
 8002e42:	d0f8      	beq.n	8002e36 <sbrk_aligned+0x22>
 8002e44:	1a21      	subs	r1, r4, r0
 8002e46:	4628      	mov	r0, r5
 8002e48:	f000 fb92 	bl	8003570 <_sbrk_r>
 8002e4c:	3001      	adds	r0, #1
 8002e4e:	d1f2      	bne.n	8002e36 <sbrk_aligned+0x22>
 8002e50:	e7ef      	b.n	8002e32 <sbrk_aligned+0x1e>
 8002e52:	bf00      	nop
 8002e54:	20000228 	.word	0x20000228

08002e58 <_malloc_r>:
 8002e58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002e5c:	1ccd      	adds	r5, r1, #3
 8002e5e:	f025 0503 	bic.w	r5, r5, #3
 8002e62:	3508      	adds	r5, #8
 8002e64:	2d0c      	cmp	r5, #12
 8002e66:	bf38      	it	cc
 8002e68:	250c      	movcc	r5, #12
 8002e6a:	2d00      	cmp	r5, #0
 8002e6c:	4606      	mov	r6, r0
 8002e6e:	db01      	blt.n	8002e74 <_malloc_r+0x1c>
 8002e70:	42a9      	cmp	r1, r5
 8002e72:	d904      	bls.n	8002e7e <_malloc_r+0x26>
 8002e74:	230c      	movs	r3, #12
 8002e76:	6033      	str	r3, [r6, #0]
 8002e78:	2000      	movs	r0, #0
 8002e7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002e7e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002f54 <_malloc_r+0xfc>
 8002e82:	f000 f869 	bl	8002f58 <__malloc_lock>
 8002e86:	f8d8 3000 	ldr.w	r3, [r8]
 8002e8a:	461c      	mov	r4, r3
 8002e8c:	bb44      	cbnz	r4, 8002ee0 <_malloc_r+0x88>
 8002e8e:	4629      	mov	r1, r5
 8002e90:	4630      	mov	r0, r6
 8002e92:	f7ff ffbf 	bl	8002e14 <sbrk_aligned>
 8002e96:	1c43      	adds	r3, r0, #1
 8002e98:	4604      	mov	r4, r0
 8002e9a:	d158      	bne.n	8002f4e <_malloc_r+0xf6>
 8002e9c:	f8d8 4000 	ldr.w	r4, [r8]
 8002ea0:	4627      	mov	r7, r4
 8002ea2:	2f00      	cmp	r7, #0
 8002ea4:	d143      	bne.n	8002f2e <_malloc_r+0xd6>
 8002ea6:	2c00      	cmp	r4, #0
 8002ea8:	d04b      	beq.n	8002f42 <_malloc_r+0xea>
 8002eaa:	6823      	ldr	r3, [r4, #0]
 8002eac:	4639      	mov	r1, r7
 8002eae:	4630      	mov	r0, r6
 8002eb0:	eb04 0903 	add.w	r9, r4, r3
 8002eb4:	f000 fb5c 	bl	8003570 <_sbrk_r>
 8002eb8:	4581      	cmp	r9, r0
 8002eba:	d142      	bne.n	8002f42 <_malloc_r+0xea>
 8002ebc:	6821      	ldr	r1, [r4, #0]
 8002ebe:	1a6d      	subs	r5, r5, r1
 8002ec0:	4629      	mov	r1, r5
 8002ec2:	4630      	mov	r0, r6
 8002ec4:	f7ff ffa6 	bl	8002e14 <sbrk_aligned>
 8002ec8:	3001      	adds	r0, #1
 8002eca:	d03a      	beq.n	8002f42 <_malloc_r+0xea>
 8002ecc:	6823      	ldr	r3, [r4, #0]
 8002ece:	442b      	add	r3, r5
 8002ed0:	6023      	str	r3, [r4, #0]
 8002ed2:	f8d8 3000 	ldr.w	r3, [r8]
 8002ed6:	685a      	ldr	r2, [r3, #4]
 8002ed8:	bb62      	cbnz	r2, 8002f34 <_malloc_r+0xdc>
 8002eda:	f8c8 7000 	str.w	r7, [r8]
 8002ede:	e00f      	b.n	8002f00 <_malloc_r+0xa8>
 8002ee0:	6822      	ldr	r2, [r4, #0]
 8002ee2:	1b52      	subs	r2, r2, r5
 8002ee4:	d420      	bmi.n	8002f28 <_malloc_r+0xd0>
 8002ee6:	2a0b      	cmp	r2, #11
 8002ee8:	d917      	bls.n	8002f1a <_malloc_r+0xc2>
 8002eea:	1961      	adds	r1, r4, r5
 8002eec:	42a3      	cmp	r3, r4
 8002eee:	6025      	str	r5, [r4, #0]
 8002ef0:	bf18      	it	ne
 8002ef2:	6059      	strne	r1, [r3, #4]
 8002ef4:	6863      	ldr	r3, [r4, #4]
 8002ef6:	bf08      	it	eq
 8002ef8:	f8c8 1000 	streq.w	r1, [r8]
 8002efc:	5162      	str	r2, [r4, r5]
 8002efe:	604b      	str	r3, [r1, #4]
 8002f00:	4630      	mov	r0, r6
 8002f02:	f000 f82f 	bl	8002f64 <__malloc_unlock>
 8002f06:	f104 000b 	add.w	r0, r4, #11
 8002f0a:	1d23      	adds	r3, r4, #4
 8002f0c:	f020 0007 	bic.w	r0, r0, #7
 8002f10:	1ac2      	subs	r2, r0, r3
 8002f12:	bf1c      	itt	ne
 8002f14:	1a1b      	subne	r3, r3, r0
 8002f16:	50a3      	strne	r3, [r4, r2]
 8002f18:	e7af      	b.n	8002e7a <_malloc_r+0x22>
 8002f1a:	6862      	ldr	r2, [r4, #4]
 8002f1c:	42a3      	cmp	r3, r4
 8002f1e:	bf0c      	ite	eq
 8002f20:	f8c8 2000 	streq.w	r2, [r8]
 8002f24:	605a      	strne	r2, [r3, #4]
 8002f26:	e7eb      	b.n	8002f00 <_malloc_r+0xa8>
 8002f28:	4623      	mov	r3, r4
 8002f2a:	6864      	ldr	r4, [r4, #4]
 8002f2c:	e7ae      	b.n	8002e8c <_malloc_r+0x34>
 8002f2e:	463c      	mov	r4, r7
 8002f30:	687f      	ldr	r7, [r7, #4]
 8002f32:	e7b6      	b.n	8002ea2 <_malloc_r+0x4a>
 8002f34:	461a      	mov	r2, r3
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	42a3      	cmp	r3, r4
 8002f3a:	d1fb      	bne.n	8002f34 <_malloc_r+0xdc>
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	6053      	str	r3, [r2, #4]
 8002f40:	e7de      	b.n	8002f00 <_malloc_r+0xa8>
 8002f42:	230c      	movs	r3, #12
 8002f44:	6033      	str	r3, [r6, #0]
 8002f46:	4630      	mov	r0, r6
 8002f48:	f000 f80c 	bl	8002f64 <__malloc_unlock>
 8002f4c:	e794      	b.n	8002e78 <_malloc_r+0x20>
 8002f4e:	6005      	str	r5, [r0, #0]
 8002f50:	e7d6      	b.n	8002f00 <_malloc_r+0xa8>
 8002f52:	bf00      	nop
 8002f54:	2000022c 	.word	0x2000022c

08002f58 <__malloc_lock>:
 8002f58:	4801      	ldr	r0, [pc, #4]	@ (8002f60 <__malloc_lock+0x8>)
 8002f5a:	f7ff bf0f 	b.w	8002d7c <__retarget_lock_acquire_recursive>
 8002f5e:	bf00      	nop
 8002f60:	20000224 	.word	0x20000224

08002f64 <__malloc_unlock>:
 8002f64:	4801      	ldr	r0, [pc, #4]	@ (8002f6c <__malloc_unlock+0x8>)
 8002f66:	f7ff bf0a 	b.w	8002d7e <__retarget_lock_release_recursive>
 8002f6a:	bf00      	nop
 8002f6c:	20000224 	.word	0x20000224

08002f70 <__ssputs_r>:
 8002f70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f74:	688e      	ldr	r6, [r1, #8]
 8002f76:	461f      	mov	r7, r3
 8002f78:	42be      	cmp	r6, r7
 8002f7a:	680b      	ldr	r3, [r1, #0]
 8002f7c:	4682      	mov	sl, r0
 8002f7e:	460c      	mov	r4, r1
 8002f80:	4690      	mov	r8, r2
 8002f82:	d82d      	bhi.n	8002fe0 <__ssputs_r+0x70>
 8002f84:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002f88:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002f8c:	d026      	beq.n	8002fdc <__ssputs_r+0x6c>
 8002f8e:	6965      	ldr	r5, [r4, #20]
 8002f90:	6909      	ldr	r1, [r1, #16]
 8002f92:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002f96:	eba3 0901 	sub.w	r9, r3, r1
 8002f9a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002f9e:	1c7b      	adds	r3, r7, #1
 8002fa0:	444b      	add	r3, r9
 8002fa2:	106d      	asrs	r5, r5, #1
 8002fa4:	429d      	cmp	r5, r3
 8002fa6:	bf38      	it	cc
 8002fa8:	461d      	movcc	r5, r3
 8002faa:	0553      	lsls	r3, r2, #21
 8002fac:	d527      	bpl.n	8002ffe <__ssputs_r+0x8e>
 8002fae:	4629      	mov	r1, r5
 8002fb0:	f7ff ff52 	bl	8002e58 <_malloc_r>
 8002fb4:	4606      	mov	r6, r0
 8002fb6:	b360      	cbz	r0, 8003012 <__ssputs_r+0xa2>
 8002fb8:	6921      	ldr	r1, [r4, #16]
 8002fba:	464a      	mov	r2, r9
 8002fbc:	f000 fae8 	bl	8003590 <memcpy>
 8002fc0:	89a3      	ldrh	r3, [r4, #12]
 8002fc2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002fc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002fca:	81a3      	strh	r3, [r4, #12]
 8002fcc:	6126      	str	r6, [r4, #16]
 8002fce:	6165      	str	r5, [r4, #20]
 8002fd0:	444e      	add	r6, r9
 8002fd2:	eba5 0509 	sub.w	r5, r5, r9
 8002fd6:	6026      	str	r6, [r4, #0]
 8002fd8:	60a5      	str	r5, [r4, #8]
 8002fda:	463e      	mov	r6, r7
 8002fdc:	42be      	cmp	r6, r7
 8002fde:	d900      	bls.n	8002fe2 <__ssputs_r+0x72>
 8002fe0:	463e      	mov	r6, r7
 8002fe2:	6820      	ldr	r0, [r4, #0]
 8002fe4:	4632      	mov	r2, r6
 8002fe6:	4641      	mov	r1, r8
 8002fe8:	f000 faa8 	bl	800353c <memmove>
 8002fec:	68a3      	ldr	r3, [r4, #8]
 8002fee:	1b9b      	subs	r3, r3, r6
 8002ff0:	60a3      	str	r3, [r4, #8]
 8002ff2:	6823      	ldr	r3, [r4, #0]
 8002ff4:	4433      	add	r3, r6
 8002ff6:	6023      	str	r3, [r4, #0]
 8002ff8:	2000      	movs	r0, #0
 8002ffa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ffe:	462a      	mov	r2, r5
 8003000:	f000 fad4 	bl	80035ac <_realloc_r>
 8003004:	4606      	mov	r6, r0
 8003006:	2800      	cmp	r0, #0
 8003008:	d1e0      	bne.n	8002fcc <__ssputs_r+0x5c>
 800300a:	6921      	ldr	r1, [r4, #16]
 800300c:	4650      	mov	r0, sl
 800300e:	f7ff feb7 	bl	8002d80 <_free_r>
 8003012:	230c      	movs	r3, #12
 8003014:	f8ca 3000 	str.w	r3, [sl]
 8003018:	89a3      	ldrh	r3, [r4, #12]
 800301a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800301e:	81a3      	strh	r3, [r4, #12]
 8003020:	f04f 30ff 	mov.w	r0, #4294967295
 8003024:	e7e9      	b.n	8002ffa <__ssputs_r+0x8a>
	...

08003028 <_svfiprintf_r>:
 8003028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800302c:	4698      	mov	r8, r3
 800302e:	898b      	ldrh	r3, [r1, #12]
 8003030:	061b      	lsls	r3, r3, #24
 8003032:	b09d      	sub	sp, #116	@ 0x74
 8003034:	4607      	mov	r7, r0
 8003036:	460d      	mov	r5, r1
 8003038:	4614      	mov	r4, r2
 800303a:	d510      	bpl.n	800305e <_svfiprintf_r+0x36>
 800303c:	690b      	ldr	r3, [r1, #16]
 800303e:	b973      	cbnz	r3, 800305e <_svfiprintf_r+0x36>
 8003040:	2140      	movs	r1, #64	@ 0x40
 8003042:	f7ff ff09 	bl	8002e58 <_malloc_r>
 8003046:	6028      	str	r0, [r5, #0]
 8003048:	6128      	str	r0, [r5, #16]
 800304a:	b930      	cbnz	r0, 800305a <_svfiprintf_r+0x32>
 800304c:	230c      	movs	r3, #12
 800304e:	603b      	str	r3, [r7, #0]
 8003050:	f04f 30ff 	mov.w	r0, #4294967295
 8003054:	b01d      	add	sp, #116	@ 0x74
 8003056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800305a:	2340      	movs	r3, #64	@ 0x40
 800305c:	616b      	str	r3, [r5, #20]
 800305e:	2300      	movs	r3, #0
 8003060:	9309      	str	r3, [sp, #36]	@ 0x24
 8003062:	2320      	movs	r3, #32
 8003064:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003068:	f8cd 800c 	str.w	r8, [sp, #12]
 800306c:	2330      	movs	r3, #48	@ 0x30
 800306e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800320c <_svfiprintf_r+0x1e4>
 8003072:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003076:	f04f 0901 	mov.w	r9, #1
 800307a:	4623      	mov	r3, r4
 800307c:	469a      	mov	sl, r3
 800307e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003082:	b10a      	cbz	r2, 8003088 <_svfiprintf_r+0x60>
 8003084:	2a25      	cmp	r2, #37	@ 0x25
 8003086:	d1f9      	bne.n	800307c <_svfiprintf_r+0x54>
 8003088:	ebba 0b04 	subs.w	fp, sl, r4
 800308c:	d00b      	beq.n	80030a6 <_svfiprintf_r+0x7e>
 800308e:	465b      	mov	r3, fp
 8003090:	4622      	mov	r2, r4
 8003092:	4629      	mov	r1, r5
 8003094:	4638      	mov	r0, r7
 8003096:	f7ff ff6b 	bl	8002f70 <__ssputs_r>
 800309a:	3001      	adds	r0, #1
 800309c:	f000 80a7 	beq.w	80031ee <_svfiprintf_r+0x1c6>
 80030a0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80030a2:	445a      	add	r2, fp
 80030a4:	9209      	str	r2, [sp, #36]	@ 0x24
 80030a6:	f89a 3000 	ldrb.w	r3, [sl]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	f000 809f 	beq.w	80031ee <_svfiprintf_r+0x1c6>
 80030b0:	2300      	movs	r3, #0
 80030b2:	f04f 32ff 	mov.w	r2, #4294967295
 80030b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80030ba:	f10a 0a01 	add.w	sl, sl, #1
 80030be:	9304      	str	r3, [sp, #16]
 80030c0:	9307      	str	r3, [sp, #28]
 80030c2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80030c6:	931a      	str	r3, [sp, #104]	@ 0x68
 80030c8:	4654      	mov	r4, sl
 80030ca:	2205      	movs	r2, #5
 80030cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80030d0:	484e      	ldr	r0, [pc, #312]	@ (800320c <_svfiprintf_r+0x1e4>)
 80030d2:	f7fd f885 	bl	80001e0 <memchr>
 80030d6:	9a04      	ldr	r2, [sp, #16]
 80030d8:	b9d8      	cbnz	r0, 8003112 <_svfiprintf_r+0xea>
 80030da:	06d0      	lsls	r0, r2, #27
 80030dc:	bf44      	itt	mi
 80030de:	2320      	movmi	r3, #32
 80030e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80030e4:	0711      	lsls	r1, r2, #28
 80030e6:	bf44      	itt	mi
 80030e8:	232b      	movmi	r3, #43	@ 0x2b
 80030ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80030ee:	f89a 3000 	ldrb.w	r3, [sl]
 80030f2:	2b2a      	cmp	r3, #42	@ 0x2a
 80030f4:	d015      	beq.n	8003122 <_svfiprintf_r+0xfa>
 80030f6:	9a07      	ldr	r2, [sp, #28]
 80030f8:	4654      	mov	r4, sl
 80030fa:	2000      	movs	r0, #0
 80030fc:	f04f 0c0a 	mov.w	ip, #10
 8003100:	4621      	mov	r1, r4
 8003102:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003106:	3b30      	subs	r3, #48	@ 0x30
 8003108:	2b09      	cmp	r3, #9
 800310a:	d94b      	bls.n	80031a4 <_svfiprintf_r+0x17c>
 800310c:	b1b0      	cbz	r0, 800313c <_svfiprintf_r+0x114>
 800310e:	9207      	str	r2, [sp, #28]
 8003110:	e014      	b.n	800313c <_svfiprintf_r+0x114>
 8003112:	eba0 0308 	sub.w	r3, r0, r8
 8003116:	fa09 f303 	lsl.w	r3, r9, r3
 800311a:	4313      	orrs	r3, r2
 800311c:	9304      	str	r3, [sp, #16]
 800311e:	46a2      	mov	sl, r4
 8003120:	e7d2      	b.n	80030c8 <_svfiprintf_r+0xa0>
 8003122:	9b03      	ldr	r3, [sp, #12]
 8003124:	1d19      	adds	r1, r3, #4
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	9103      	str	r1, [sp, #12]
 800312a:	2b00      	cmp	r3, #0
 800312c:	bfbb      	ittet	lt
 800312e:	425b      	neglt	r3, r3
 8003130:	f042 0202 	orrlt.w	r2, r2, #2
 8003134:	9307      	strge	r3, [sp, #28]
 8003136:	9307      	strlt	r3, [sp, #28]
 8003138:	bfb8      	it	lt
 800313a:	9204      	strlt	r2, [sp, #16]
 800313c:	7823      	ldrb	r3, [r4, #0]
 800313e:	2b2e      	cmp	r3, #46	@ 0x2e
 8003140:	d10a      	bne.n	8003158 <_svfiprintf_r+0x130>
 8003142:	7863      	ldrb	r3, [r4, #1]
 8003144:	2b2a      	cmp	r3, #42	@ 0x2a
 8003146:	d132      	bne.n	80031ae <_svfiprintf_r+0x186>
 8003148:	9b03      	ldr	r3, [sp, #12]
 800314a:	1d1a      	adds	r2, r3, #4
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	9203      	str	r2, [sp, #12]
 8003150:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003154:	3402      	adds	r4, #2
 8003156:	9305      	str	r3, [sp, #20]
 8003158:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800321c <_svfiprintf_r+0x1f4>
 800315c:	7821      	ldrb	r1, [r4, #0]
 800315e:	2203      	movs	r2, #3
 8003160:	4650      	mov	r0, sl
 8003162:	f7fd f83d 	bl	80001e0 <memchr>
 8003166:	b138      	cbz	r0, 8003178 <_svfiprintf_r+0x150>
 8003168:	9b04      	ldr	r3, [sp, #16]
 800316a:	eba0 000a 	sub.w	r0, r0, sl
 800316e:	2240      	movs	r2, #64	@ 0x40
 8003170:	4082      	lsls	r2, r0
 8003172:	4313      	orrs	r3, r2
 8003174:	3401      	adds	r4, #1
 8003176:	9304      	str	r3, [sp, #16]
 8003178:	f814 1b01 	ldrb.w	r1, [r4], #1
 800317c:	4824      	ldr	r0, [pc, #144]	@ (8003210 <_svfiprintf_r+0x1e8>)
 800317e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003182:	2206      	movs	r2, #6
 8003184:	f7fd f82c 	bl	80001e0 <memchr>
 8003188:	2800      	cmp	r0, #0
 800318a:	d036      	beq.n	80031fa <_svfiprintf_r+0x1d2>
 800318c:	4b21      	ldr	r3, [pc, #132]	@ (8003214 <_svfiprintf_r+0x1ec>)
 800318e:	bb1b      	cbnz	r3, 80031d8 <_svfiprintf_r+0x1b0>
 8003190:	9b03      	ldr	r3, [sp, #12]
 8003192:	3307      	adds	r3, #7
 8003194:	f023 0307 	bic.w	r3, r3, #7
 8003198:	3308      	adds	r3, #8
 800319a:	9303      	str	r3, [sp, #12]
 800319c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800319e:	4433      	add	r3, r6
 80031a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80031a2:	e76a      	b.n	800307a <_svfiprintf_r+0x52>
 80031a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80031a8:	460c      	mov	r4, r1
 80031aa:	2001      	movs	r0, #1
 80031ac:	e7a8      	b.n	8003100 <_svfiprintf_r+0xd8>
 80031ae:	2300      	movs	r3, #0
 80031b0:	3401      	adds	r4, #1
 80031b2:	9305      	str	r3, [sp, #20]
 80031b4:	4619      	mov	r1, r3
 80031b6:	f04f 0c0a 	mov.w	ip, #10
 80031ba:	4620      	mov	r0, r4
 80031bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80031c0:	3a30      	subs	r2, #48	@ 0x30
 80031c2:	2a09      	cmp	r2, #9
 80031c4:	d903      	bls.n	80031ce <_svfiprintf_r+0x1a6>
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d0c6      	beq.n	8003158 <_svfiprintf_r+0x130>
 80031ca:	9105      	str	r1, [sp, #20]
 80031cc:	e7c4      	b.n	8003158 <_svfiprintf_r+0x130>
 80031ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80031d2:	4604      	mov	r4, r0
 80031d4:	2301      	movs	r3, #1
 80031d6:	e7f0      	b.n	80031ba <_svfiprintf_r+0x192>
 80031d8:	ab03      	add	r3, sp, #12
 80031da:	9300      	str	r3, [sp, #0]
 80031dc:	462a      	mov	r2, r5
 80031de:	4b0e      	ldr	r3, [pc, #56]	@ (8003218 <_svfiprintf_r+0x1f0>)
 80031e0:	a904      	add	r1, sp, #16
 80031e2:	4638      	mov	r0, r7
 80031e4:	f3af 8000 	nop.w
 80031e8:	1c42      	adds	r2, r0, #1
 80031ea:	4606      	mov	r6, r0
 80031ec:	d1d6      	bne.n	800319c <_svfiprintf_r+0x174>
 80031ee:	89ab      	ldrh	r3, [r5, #12]
 80031f0:	065b      	lsls	r3, r3, #25
 80031f2:	f53f af2d 	bmi.w	8003050 <_svfiprintf_r+0x28>
 80031f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80031f8:	e72c      	b.n	8003054 <_svfiprintf_r+0x2c>
 80031fa:	ab03      	add	r3, sp, #12
 80031fc:	9300      	str	r3, [sp, #0]
 80031fe:	462a      	mov	r2, r5
 8003200:	4b05      	ldr	r3, [pc, #20]	@ (8003218 <_svfiprintf_r+0x1f0>)
 8003202:	a904      	add	r1, sp, #16
 8003204:	4638      	mov	r0, r7
 8003206:	f000 f879 	bl	80032fc <_printf_i>
 800320a:	e7ed      	b.n	80031e8 <_svfiprintf_r+0x1c0>
 800320c:	08003758 	.word	0x08003758
 8003210:	08003762 	.word	0x08003762
 8003214:	00000000 	.word	0x00000000
 8003218:	08002f71 	.word	0x08002f71
 800321c:	0800375e 	.word	0x0800375e

08003220 <_printf_common>:
 8003220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003224:	4616      	mov	r6, r2
 8003226:	4698      	mov	r8, r3
 8003228:	688a      	ldr	r2, [r1, #8]
 800322a:	690b      	ldr	r3, [r1, #16]
 800322c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003230:	4293      	cmp	r3, r2
 8003232:	bfb8      	it	lt
 8003234:	4613      	movlt	r3, r2
 8003236:	6033      	str	r3, [r6, #0]
 8003238:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800323c:	4607      	mov	r7, r0
 800323e:	460c      	mov	r4, r1
 8003240:	b10a      	cbz	r2, 8003246 <_printf_common+0x26>
 8003242:	3301      	adds	r3, #1
 8003244:	6033      	str	r3, [r6, #0]
 8003246:	6823      	ldr	r3, [r4, #0]
 8003248:	0699      	lsls	r1, r3, #26
 800324a:	bf42      	ittt	mi
 800324c:	6833      	ldrmi	r3, [r6, #0]
 800324e:	3302      	addmi	r3, #2
 8003250:	6033      	strmi	r3, [r6, #0]
 8003252:	6825      	ldr	r5, [r4, #0]
 8003254:	f015 0506 	ands.w	r5, r5, #6
 8003258:	d106      	bne.n	8003268 <_printf_common+0x48>
 800325a:	f104 0a19 	add.w	sl, r4, #25
 800325e:	68e3      	ldr	r3, [r4, #12]
 8003260:	6832      	ldr	r2, [r6, #0]
 8003262:	1a9b      	subs	r3, r3, r2
 8003264:	42ab      	cmp	r3, r5
 8003266:	dc26      	bgt.n	80032b6 <_printf_common+0x96>
 8003268:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800326c:	6822      	ldr	r2, [r4, #0]
 800326e:	3b00      	subs	r3, #0
 8003270:	bf18      	it	ne
 8003272:	2301      	movne	r3, #1
 8003274:	0692      	lsls	r2, r2, #26
 8003276:	d42b      	bmi.n	80032d0 <_printf_common+0xb0>
 8003278:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800327c:	4641      	mov	r1, r8
 800327e:	4638      	mov	r0, r7
 8003280:	47c8      	blx	r9
 8003282:	3001      	adds	r0, #1
 8003284:	d01e      	beq.n	80032c4 <_printf_common+0xa4>
 8003286:	6823      	ldr	r3, [r4, #0]
 8003288:	6922      	ldr	r2, [r4, #16]
 800328a:	f003 0306 	and.w	r3, r3, #6
 800328e:	2b04      	cmp	r3, #4
 8003290:	bf02      	ittt	eq
 8003292:	68e5      	ldreq	r5, [r4, #12]
 8003294:	6833      	ldreq	r3, [r6, #0]
 8003296:	1aed      	subeq	r5, r5, r3
 8003298:	68a3      	ldr	r3, [r4, #8]
 800329a:	bf0c      	ite	eq
 800329c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80032a0:	2500      	movne	r5, #0
 80032a2:	4293      	cmp	r3, r2
 80032a4:	bfc4      	itt	gt
 80032a6:	1a9b      	subgt	r3, r3, r2
 80032a8:	18ed      	addgt	r5, r5, r3
 80032aa:	2600      	movs	r6, #0
 80032ac:	341a      	adds	r4, #26
 80032ae:	42b5      	cmp	r5, r6
 80032b0:	d11a      	bne.n	80032e8 <_printf_common+0xc8>
 80032b2:	2000      	movs	r0, #0
 80032b4:	e008      	b.n	80032c8 <_printf_common+0xa8>
 80032b6:	2301      	movs	r3, #1
 80032b8:	4652      	mov	r2, sl
 80032ba:	4641      	mov	r1, r8
 80032bc:	4638      	mov	r0, r7
 80032be:	47c8      	blx	r9
 80032c0:	3001      	adds	r0, #1
 80032c2:	d103      	bne.n	80032cc <_printf_common+0xac>
 80032c4:	f04f 30ff 	mov.w	r0, #4294967295
 80032c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032cc:	3501      	adds	r5, #1
 80032ce:	e7c6      	b.n	800325e <_printf_common+0x3e>
 80032d0:	18e1      	adds	r1, r4, r3
 80032d2:	1c5a      	adds	r2, r3, #1
 80032d4:	2030      	movs	r0, #48	@ 0x30
 80032d6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80032da:	4422      	add	r2, r4
 80032dc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80032e0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80032e4:	3302      	adds	r3, #2
 80032e6:	e7c7      	b.n	8003278 <_printf_common+0x58>
 80032e8:	2301      	movs	r3, #1
 80032ea:	4622      	mov	r2, r4
 80032ec:	4641      	mov	r1, r8
 80032ee:	4638      	mov	r0, r7
 80032f0:	47c8      	blx	r9
 80032f2:	3001      	adds	r0, #1
 80032f4:	d0e6      	beq.n	80032c4 <_printf_common+0xa4>
 80032f6:	3601      	adds	r6, #1
 80032f8:	e7d9      	b.n	80032ae <_printf_common+0x8e>
	...

080032fc <_printf_i>:
 80032fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003300:	7e0f      	ldrb	r7, [r1, #24]
 8003302:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003304:	2f78      	cmp	r7, #120	@ 0x78
 8003306:	4691      	mov	r9, r2
 8003308:	4680      	mov	r8, r0
 800330a:	460c      	mov	r4, r1
 800330c:	469a      	mov	sl, r3
 800330e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003312:	d807      	bhi.n	8003324 <_printf_i+0x28>
 8003314:	2f62      	cmp	r7, #98	@ 0x62
 8003316:	d80a      	bhi.n	800332e <_printf_i+0x32>
 8003318:	2f00      	cmp	r7, #0
 800331a:	f000 80d2 	beq.w	80034c2 <_printf_i+0x1c6>
 800331e:	2f58      	cmp	r7, #88	@ 0x58
 8003320:	f000 80b9 	beq.w	8003496 <_printf_i+0x19a>
 8003324:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003328:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800332c:	e03a      	b.n	80033a4 <_printf_i+0xa8>
 800332e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003332:	2b15      	cmp	r3, #21
 8003334:	d8f6      	bhi.n	8003324 <_printf_i+0x28>
 8003336:	a101      	add	r1, pc, #4	@ (adr r1, 800333c <_printf_i+0x40>)
 8003338:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800333c:	08003395 	.word	0x08003395
 8003340:	080033a9 	.word	0x080033a9
 8003344:	08003325 	.word	0x08003325
 8003348:	08003325 	.word	0x08003325
 800334c:	08003325 	.word	0x08003325
 8003350:	08003325 	.word	0x08003325
 8003354:	080033a9 	.word	0x080033a9
 8003358:	08003325 	.word	0x08003325
 800335c:	08003325 	.word	0x08003325
 8003360:	08003325 	.word	0x08003325
 8003364:	08003325 	.word	0x08003325
 8003368:	080034a9 	.word	0x080034a9
 800336c:	080033d3 	.word	0x080033d3
 8003370:	08003463 	.word	0x08003463
 8003374:	08003325 	.word	0x08003325
 8003378:	08003325 	.word	0x08003325
 800337c:	080034cb 	.word	0x080034cb
 8003380:	08003325 	.word	0x08003325
 8003384:	080033d3 	.word	0x080033d3
 8003388:	08003325 	.word	0x08003325
 800338c:	08003325 	.word	0x08003325
 8003390:	0800346b 	.word	0x0800346b
 8003394:	6833      	ldr	r3, [r6, #0]
 8003396:	1d1a      	adds	r2, r3, #4
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	6032      	str	r2, [r6, #0]
 800339c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80033a0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80033a4:	2301      	movs	r3, #1
 80033a6:	e09d      	b.n	80034e4 <_printf_i+0x1e8>
 80033a8:	6833      	ldr	r3, [r6, #0]
 80033aa:	6820      	ldr	r0, [r4, #0]
 80033ac:	1d19      	adds	r1, r3, #4
 80033ae:	6031      	str	r1, [r6, #0]
 80033b0:	0606      	lsls	r6, r0, #24
 80033b2:	d501      	bpl.n	80033b8 <_printf_i+0xbc>
 80033b4:	681d      	ldr	r5, [r3, #0]
 80033b6:	e003      	b.n	80033c0 <_printf_i+0xc4>
 80033b8:	0645      	lsls	r5, r0, #25
 80033ba:	d5fb      	bpl.n	80033b4 <_printf_i+0xb8>
 80033bc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80033c0:	2d00      	cmp	r5, #0
 80033c2:	da03      	bge.n	80033cc <_printf_i+0xd0>
 80033c4:	232d      	movs	r3, #45	@ 0x2d
 80033c6:	426d      	negs	r5, r5
 80033c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80033cc:	4859      	ldr	r0, [pc, #356]	@ (8003534 <_printf_i+0x238>)
 80033ce:	230a      	movs	r3, #10
 80033d0:	e011      	b.n	80033f6 <_printf_i+0xfa>
 80033d2:	6821      	ldr	r1, [r4, #0]
 80033d4:	6833      	ldr	r3, [r6, #0]
 80033d6:	0608      	lsls	r0, r1, #24
 80033d8:	f853 5b04 	ldr.w	r5, [r3], #4
 80033dc:	d402      	bmi.n	80033e4 <_printf_i+0xe8>
 80033de:	0649      	lsls	r1, r1, #25
 80033e0:	bf48      	it	mi
 80033e2:	b2ad      	uxthmi	r5, r5
 80033e4:	2f6f      	cmp	r7, #111	@ 0x6f
 80033e6:	4853      	ldr	r0, [pc, #332]	@ (8003534 <_printf_i+0x238>)
 80033e8:	6033      	str	r3, [r6, #0]
 80033ea:	bf14      	ite	ne
 80033ec:	230a      	movne	r3, #10
 80033ee:	2308      	moveq	r3, #8
 80033f0:	2100      	movs	r1, #0
 80033f2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80033f6:	6866      	ldr	r6, [r4, #4]
 80033f8:	60a6      	str	r6, [r4, #8]
 80033fa:	2e00      	cmp	r6, #0
 80033fc:	bfa2      	ittt	ge
 80033fe:	6821      	ldrge	r1, [r4, #0]
 8003400:	f021 0104 	bicge.w	r1, r1, #4
 8003404:	6021      	strge	r1, [r4, #0]
 8003406:	b90d      	cbnz	r5, 800340c <_printf_i+0x110>
 8003408:	2e00      	cmp	r6, #0
 800340a:	d04b      	beq.n	80034a4 <_printf_i+0x1a8>
 800340c:	4616      	mov	r6, r2
 800340e:	fbb5 f1f3 	udiv	r1, r5, r3
 8003412:	fb03 5711 	mls	r7, r3, r1, r5
 8003416:	5dc7      	ldrb	r7, [r0, r7]
 8003418:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800341c:	462f      	mov	r7, r5
 800341e:	42bb      	cmp	r3, r7
 8003420:	460d      	mov	r5, r1
 8003422:	d9f4      	bls.n	800340e <_printf_i+0x112>
 8003424:	2b08      	cmp	r3, #8
 8003426:	d10b      	bne.n	8003440 <_printf_i+0x144>
 8003428:	6823      	ldr	r3, [r4, #0]
 800342a:	07df      	lsls	r7, r3, #31
 800342c:	d508      	bpl.n	8003440 <_printf_i+0x144>
 800342e:	6923      	ldr	r3, [r4, #16]
 8003430:	6861      	ldr	r1, [r4, #4]
 8003432:	4299      	cmp	r1, r3
 8003434:	bfde      	ittt	le
 8003436:	2330      	movle	r3, #48	@ 0x30
 8003438:	f806 3c01 	strble.w	r3, [r6, #-1]
 800343c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003440:	1b92      	subs	r2, r2, r6
 8003442:	6122      	str	r2, [r4, #16]
 8003444:	f8cd a000 	str.w	sl, [sp]
 8003448:	464b      	mov	r3, r9
 800344a:	aa03      	add	r2, sp, #12
 800344c:	4621      	mov	r1, r4
 800344e:	4640      	mov	r0, r8
 8003450:	f7ff fee6 	bl	8003220 <_printf_common>
 8003454:	3001      	adds	r0, #1
 8003456:	d14a      	bne.n	80034ee <_printf_i+0x1f2>
 8003458:	f04f 30ff 	mov.w	r0, #4294967295
 800345c:	b004      	add	sp, #16
 800345e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003462:	6823      	ldr	r3, [r4, #0]
 8003464:	f043 0320 	orr.w	r3, r3, #32
 8003468:	6023      	str	r3, [r4, #0]
 800346a:	4833      	ldr	r0, [pc, #204]	@ (8003538 <_printf_i+0x23c>)
 800346c:	2778      	movs	r7, #120	@ 0x78
 800346e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003472:	6823      	ldr	r3, [r4, #0]
 8003474:	6831      	ldr	r1, [r6, #0]
 8003476:	061f      	lsls	r7, r3, #24
 8003478:	f851 5b04 	ldr.w	r5, [r1], #4
 800347c:	d402      	bmi.n	8003484 <_printf_i+0x188>
 800347e:	065f      	lsls	r7, r3, #25
 8003480:	bf48      	it	mi
 8003482:	b2ad      	uxthmi	r5, r5
 8003484:	6031      	str	r1, [r6, #0]
 8003486:	07d9      	lsls	r1, r3, #31
 8003488:	bf44      	itt	mi
 800348a:	f043 0320 	orrmi.w	r3, r3, #32
 800348e:	6023      	strmi	r3, [r4, #0]
 8003490:	b11d      	cbz	r5, 800349a <_printf_i+0x19e>
 8003492:	2310      	movs	r3, #16
 8003494:	e7ac      	b.n	80033f0 <_printf_i+0xf4>
 8003496:	4827      	ldr	r0, [pc, #156]	@ (8003534 <_printf_i+0x238>)
 8003498:	e7e9      	b.n	800346e <_printf_i+0x172>
 800349a:	6823      	ldr	r3, [r4, #0]
 800349c:	f023 0320 	bic.w	r3, r3, #32
 80034a0:	6023      	str	r3, [r4, #0]
 80034a2:	e7f6      	b.n	8003492 <_printf_i+0x196>
 80034a4:	4616      	mov	r6, r2
 80034a6:	e7bd      	b.n	8003424 <_printf_i+0x128>
 80034a8:	6833      	ldr	r3, [r6, #0]
 80034aa:	6825      	ldr	r5, [r4, #0]
 80034ac:	6961      	ldr	r1, [r4, #20]
 80034ae:	1d18      	adds	r0, r3, #4
 80034b0:	6030      	str	r0, [r6, #0]
 80034b2:	062e      	lsls	r6, r5, #24
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	d501      	bpl.n	80034bc <_printf_i+0x1c0>
 80034b8:	6019      	str	r1, [r3, #0]
 80034ba:	e002      	b.n	80034c2 <_printf_i+0x1c6>
 80034bc:	0668      	lsls	r0, r5, #25
 80034be:	d5fb      	bpl.n	80034b8 <_printf_i+0x1bc>
 80034c0:	8019      	strh	r1, [r3, #0]
 80034c2:	2300      	movs	r3, #0
 80034c4:	6123      	str	r3, [r4, #16]
 80034c6:	4616      	mov	r6, r2
 80034c8:	e7bc      	b.n	8003444 <_printf_i+0x148>
 80034ca:	6833      	ldr	r3, [r6, #0]
 80034cc:	1d1a      	adds	r2, r3, #4
 80034ce:	6032      	str	r2, [r6, #0]
 80034d0:	681e      	ldr	r6, [r3, #0]
 80034d2:	6862      	ldr	r2, [r4, #4]
 80034d4:	2100      	movs	r1, #0
 80034d6:	4630      	mov	r0, r6
 80034d8:	f7fc fe82 	bl	80001e0 <memchr>
 80034dc:	b108      	cbz	r0, 80034e2 <_printf_i+0x1e6>
 80034de:	1b80      	subs	r0, r0, r6
 80034e0:	6060      	str	r0, [r4, #4]
 80034e2:	6863      	ldr	r3, [r4, #4]
 80034e4:	6123      	str	r3, [r4, #16]
 80034e6:	2300      	movs	r3, #0
 80034e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80034ec:	e7aa      	b.n	8003444 <_printf_i+0x148>
 80034ee:	6923      	ldr	r3, [r4, #16]
 80034f0:	4632      	mov	r2, r6
 80034f2:	4649      	mov	r1, r9
 80034f4:	4640      	mov	r0, r8
 80034f6:	47d0      	blx	sl
 80034f8:	3001      	adds	r0, #1
 80034fa:	d0ad      	beq.n	8003458 <_printf_i+0x15c>
 80034fc:	6823      	ldr	r3, [r4, #0]
 80034fe:	079b      	lsls	r3, r3, #30
 8003500:	d413      	bmi.n	800352a <_printf_i+0x22e>
 8003502:	68e0      	ldr	r0, [r4, #12]
 8003504:	9b03      	ldr	r3, [sp, #12]
 8003506:	4298      	cmp	r0, r3
 8003508:	bfb8      	it	lt
 800350a:	4618      	movlt	r0, r3
 800350c:	e7a6      	b.n	800345c <_printf_i+0x160>
 800350e:	2301      	movs	r3, #1
 8003510:	4632      	mov	r2, r6
 8003512:	4649      	mov	r1, r9
 8003514:	4640      	mov	r0, r8
 8003516:	47d0      	blx	sl
 8003518:	3001      	adds	r0, #1
 800351a:	d09d      	beq.n	8003458 <_printf_i+0x15c>
 800351c:	3501      	adds	r5, #1
 800351e:	68e3      	ldr	r3, [r4, #12]
 8003520:	9903      	ldr	r1, [sp, #12]
 8003522:	1a5b      	subs	r3, r3, r1
 8003524:	42ab      	cmp	r3, r5
 8003526:	dcf2      	bgt.n	800350e <_printf_i+0x212>
 8003528:	e7eb      	b.n	8003502 <_printf_i+0x206>
 800352a:	2500      	movs	r5, #0
 800352c:	f104 0619 	add.w	r6, r4, #25
 8003530:	e7f5      	b.n	800351e <_printf_i+0x222>
 8003532:	bf00      	nop
 8003534:	08003769 	.word	0x08003769
 8003538:	0800377a 	.word	0x0800377a

0800353c <memmove>:
 800353c:	4288      	cmp	r0, r1
 800353e:	b510      	push	{r4, lr}
 8003540:	eb01 0402 	add.w	r4, r1, r2
 8003544:	d902      	bls.n	800354c <memmove+0x10>
 8003546:	4284      	cmp	r4, r0
 8003548:	4623      	mov	r3, r4
 800354a:	d807      	bhi.n	800355c <memmove+0x20>
 800354c:	1e43      	subs	r3, r0, #1
 800354e:	42a1      	cmp	r1, r4
 8003550:	d008      	beq.n	8003564 <memmove+0x28>
 8003552:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003556:	f803 2f01 	strb.w	r2, [r3, #1]!
 800355a:	e7f8      	b.n	800354e <memmove+0x12>
 800355c:	4402      	add	r2, r0
 800355e:	4601      	mov	r1, r0
 8003560:	428a      	cmp	r2, r1
 8003562:	d100      	bne.n	8003566 <memmove+0x2a>
 8003564:	bd10      	pop	{r4, pc}
 8003566:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800356a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800356e:	e7f7      	b.n	8003560 <memmove+0x24>

08003570 <_sbrk_r>:
 8003570:	b538      	push	{r3, r4, r5, lr}
 8003572:	4d06      	ldr	r5, [pc, #24]	@ (800358c <_sbrk_r+0x1c>)
 8003574:	2300      	movs	r3, #0
 8003576:	4604      	mov	r4, r0
 8003578:	4608      	mov	r0, r1
 800357a:	602b      	str	r3, [r5, #0]
 800357c:	f7fd fae4 	bl	8000b48 <_sbrk>
 8003580:	1c43      	adds	r3, r0, #1
 8003582:	d102      	bne.n	800358a <_sbrk_r+0x1a>
 8003584:	682b      	ldr	r3, [r5, #0]
 8003586:	b103      	cbz	r3, 800358a <_sbrk_r+0x1a>
 8003588:	6023      	str	r3, [r4, #0]
 800358a:	bd38      	pop	{r3, r4, r5, pc}
 800358c:	20000220 	.word	0x20000220

08003590 <memcpy>:
 8003590:	440a      	add	r2, r1
 8003592:	4291      	cmp	r1, r2
 8003594:	f100 33ff 	add.w	r3, r0, #4294967295
 8003598:	d100      	bne.n	800359c <memcpy+0xc>
 800359a:	4770      	bx	lr
 800359c:	b510      	push	{r4, lr}
 800359e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80035a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80035a6:	4291      	cmp	r1, r2
 80035a8:	d1f9      	bne.n	800359e <memcpy+0xe>
 80035aa:	bd10      	pop	{r4, pc}

080035ac <_realloc_r>:
 80035ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035b0:	4680      	mov	r8, r0
 80035b2:	4615      	mov	r5, r2
 80035b4:	460c      	mov	r4, r1
 80035b6:	b921      	cbnz	r1, 80035c2 <_realloc_r+0x16>
 80035b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80035bc:	4611      	mov	r1, r2
 80035be:	f7ff bc4b 	b.w	8002e58 <_malloc_r>
 80035c2:	b92a      	cbnz	r2, 80035d0 <_realloc_r+0x24>
 80035c4:	f7ff fbdc 	bl	8002d80 <_free_r>
 80035c8:	2400      	movs	r4, #0
 80035ca:	4620      	mov	r0, r4
 80035cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80035d0:	f000 f81a 	bl	8003608 <_malloc_usable_size_r>
 80035d4:	4285      	cmp	r5, r0
 80035d6:	4606      	mov	r6, r0
 80035d8:	d802      	bhi.n	80035e0 <_realloc_r+0x34>
 80035da:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80035de:	d8f4      	bhi.n	80035ca <_realloc_r+0x1e>
 80035e0:	4629      	mov	r1, r5
 80035e2:	4640      	mov	r0, r8
 80035e4:	f7ff fc38 	bl	8002e58 <_malloc_r>
 80035e8:	4607      	mov	r7, r0
 80035ea:	2800      	cmp	r0, #0
 80035ec:	d0ec      	beq.n	80035c8 <_realloc_r+0x1c>
 80035ee:	42b5      	cmp	r5, r6
 80035f0:	462a      	mov	r2, r5
 80035f2:	4621      	mov	r1, r4
 80035f4:	bf28      	it	cs
 80035f6:	4632      	movcs	r2, r6
 80035f8:	f7ff ffca 	bl	8003590 <memcpy>
 80035fc:	4621      	mov	r1, r4
 80035fe:	4640      	mov	r0, r8
 8003600:	f7ff fbbe 	bl	8002d80 <_free_r>
 8003604:	463c      	mov	r4, r7
 8003606:	e7e0      	b.n	80035ca <_realloc_r+0x1e>

08003608 <_malloc_usable_size_r>:
 8003608:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800360c:	1f18      	subs	r0, r3, #4
 800360e:	2b00      	cmp	r3, #0
 8003610:	bfbc      	itt	lt
 8003612:	580b      	ldrlt	r3, [r1, r0]
 8003614:	18c0      	addlt	r0, r0, r3
 8003616:	4770      	bx	lr

08003618 <_init>:
 8003618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800361a:	bf00      	nop
 800361c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800361e:	bc08      	pop	{r3}
 8003620:	469e      	mov	lr, r3
 8003622:	4770      	bx	lr

08003624 <_fini>:
 8003624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003626:	bf00      	nop
 8003628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800362a:	bc08      	pop	{r3}
 800362c:	469e      	mov	lr, r3
 800362e:	4770      	bx	lr
